<?php

/**
 * @file
 * @author Bob Hutchinson http://drupal.org/user/52366
 * @copyright GNU GPL
 *
 * Provides a search page.
 * for Drupal 7
 */

define('GETLOCATIONS_SEARCH_PATH', drupal_get_path('module', 'getlocations_search'));

/**
 * Implements hook_help().
 */
function getlocations_search_help($path, $arg) {
  switch ($path) {
    case 'admin/help#getlocations_search':
      $output = '<p>' . t('Provide a search faciliy for locations on a map.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_menu().
 */
function getlocations_search_menu() {
  $items = array();

  $items['admin/config/services/getlocations_search'] = array(
    'title' => 'Getlocations search',
    'description' => 'Configure Getlocations search',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('getlocations_search_settings_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'getlocations_search.admin.inc',
  );

  $items['getlocations_search'] = array(
    'title' => 'Getlocations search',
    'access arguments' => array('access getlocations'),
    'page callback' => 'getlocations_search',
    'type' => MENU_SUGGESTED_ITEM,
  );
  // getlocations_search/info     # ajax callback to fetch all location info
  $items['getlocations_search/info'] = array(
    'page callback' => 'getlocations_search_allinfo',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  if (module_exists('taxonomy')) {
    $items['getlocations_search/term_autocomplete'] = array(
      'page callback' => 'getlocations_search_term_autocomplete',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
    );
  }

  // colorbox
  $items['getlocations_search_box'] = array(
    'title' => 'Getlocations search',
    'access arguments' => array('access getlocations'),
    'page callback' => 'getlocations_search_box',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Menu item
 */
function getlocations_search($which = 'page') {
  $contents = '';
  $getmap = getlocations_search_getmap($which);
  $map = $getmap['map'];
  $mapid = $getmap['mapid'];
  $form = drupal_get_form('getlocations_search_form', $which, $mapid);
  $contents .= drupal_render($form);
  $contents .= $map;
  return $contents;
}

/**
 * The search form
 *
 */
function getlocations_search_form($form, &$form_state, $which, $mapid) {
  $mapid2 = preg_replace("/_/", "-", $mapid);
  $getlocations_search_defaults = getlocations_search_defaults();

  if ($which == 'block') {
    $getlocations_search_defaults = getlocations_search_block_get_var();
  }

  $form['#attached']['css'] = array(GETLOCATIONS_SEARCH_PATH . '/getlocations_search.css');

  // pass this on to the theme
  $form['which'] = array('#type' => 'value', '#value' => $which);
  $form['mapid'] = array('#type' => 'value', '#value' => $mapid);

  if ($getlocations_search_defaults['method'] == 'vocab' && $getlocations_search_defaults['vocab_element'] == 'dropdown') {
    //
    $form['getlocations_search_' . $mapid] = array(
      '#type' => 'select',
      '#title' => t('Search'),
      '#options' => getlocations_search_term_get(),
    );
  }
  else {
    $form['getlocations_search_' . $mapid] = array(
      '#type' => 'textfield',
      '#title' => t('Search'),
      '#maxlength' => 255,
      '#size' => $getlocations_search_defaults['searchbox_size'],
    );
    if ($getlocations_search_defaults['method'] == 'vocab' && $getlocations_search_defaults['vocab_element'] == 'autocomplete') {
      $form['getlocations_search_' . $mapid]['#autocomplete_path'] = 'getlocations_search/term_autocomplete';
    }
  }

  if ($getlocations_search_defaults['use_geolocation_button']) {
    $form['getlocations_search_geolocation_button_' . $mapid] = array(
      '#markup' => '',
    );
  }

  if ($getlocations_search_defaults['display_search_distance']) {
    $form['getlocations_search_distance_' . $mapid] = getlocations_element_search_distance($getlocations_search_defaults['search_distance'], t('Search distance'), t('The distance away from the center to search for locations.'));
  }
  else {
    $form['getlocations_search_distance_' . $mapid] = array(
      '#type' => 'hidden',
      '#value' => $getlocations_search_defaults['search_distance'],
      '#attributes' => array('id' => 'edit-getlocations-search-distance-' . $mapid2)
    );
  }

  if ($getlocations_search_defaults['display_search_units']) {
    $form['getlocations_search_units_' . $mapid] = getlocations_element_distance_unit($getlocations_search_defaults['search_units'], t('Distance units'));
  }
  else {
    $form['getlocations_search_units_' . $mapid] = array(
      '#type' => 'hidden',
      '#value' => $getlocations_search_defaults['search_units'],
      '#attributes' => array('id' => 'edit-getlocations-search-units-' . $mapid2)
    );
  }

  if ($getlocations_search_defaults['display_search_limits']) {
    $form['getlocations_search_limits_' . $mapid] = getlocations_element_map_limits($getlocations_search_defaults['search_limits']);
  }
  else {
    $form['getlocations_search_limits_' . $mapid] = array(
      '#type' => 'hidden',
      '#value' => $getlocations_search_defaults['search_limits'],
      '#attributes' => array('id' => 'edit-getlocations-search-limits-' . $mapid2)
    );
  }

  if ($getlocations_search_defaults['display_search_type']) {
    $opts = array('all' => t('Show All'), 'node' => t('Nodes'));
    if (user_access('access user getlocations')) {
      $opts['user'] = t('Users');
    }
    if (module_exists('taxonomy')) {
      $opts['term'] = t('Terms');
    }
    if (user_access('access comments') && module_exists('comment')) {
      $opts['comment'] = t('Comments');
    }
    $form['getlocations_search_type_' . $mapid] = array(
      '#type' => 'select',
      '#title' => t('Restrict the search'),
      '#options' => $opts,
      '#default_value' => $getlocations_search_defaults['search_type'],
      '#description' => t('Restrict the search to a content type'),
    );

  }
  else {
    $form['getlocations_search_type_' . $mapid] = array(
      '#type' => 'hidden',
      '#value' => $getlocations_search_defaults['search_type'],
      '#attributes' => array('id' => 'edit-getlocations-search-type-' . $mapid2)
    );
  }

  if ($getlocations_search_defaults['restrict_by_country'] && $getlocations_search_defaults['country']) {
    $form['getlocations_search_country_' . $mapid] = array(
      '#markup' => $getlocations_search_defaults['country'],
    );
  }

  if ($getlocations_search_defaults['method'] != 'google_ac') {
    $form['getlocations_search_submit_' . $mapid] = array(
      '#type' => 'submit',
      '#value' => t('Go')
    );
  }

  return $form;
}

/**
 * colorbox
 *
 */
function getlocations_search_box() {
  $content = getlocations_search();
  $output = theme('getlocations_search_box', array('content' => $content));
  print $output;
  exit;
}

/**
 * Set up the map and use getlocations to spit it out
 *
 */
function getlocations_search_getmap($which = 'page') {
  $getlocations_defaults = getlocations_defaults();
  $getlocations_defaults['places'] = 1;
  $getlocations_defaults['preload_data'] = 0;

  $getlocations_search_defaults = getlocations_search_defaults();
  if ($which == 'block') {
    $getlocations_search_defaults = getlocations_search_block_get_var();
  }


  // we need a markermanager enabled
  if ($getlocations_defaults['markermanagertype'] < 1) {
    $getlocations_search_defaults['markermanagertype'] = 1;
  }
  $getlocations_search_defaults['pansetting'] = $getlocations_defaults['pansetting'];

  // we need to update $getlocations_defaults with data from $getlocations_search_defaults
  $keys = array(
    'width', 'height', 'styles', 'latlong', 'zoom', 'controltype', 'pancontrol',
    'mtc', 'maptype', 'baselayers', 'behavior', 'draggable', 'streetview_show',
    'trafficinfo', 'trafficinfo_state', 'bicycleinfo', 'bicycleinfo_state', 'transitinfo', 'transitinfo_state',
    'panoramio_use', 'panoramio_state', 'poi_show', 'transit_show',
    'minzoom', 'maxzoom', 'nodezoom', 'markermanagertype', 'usemarkermanager',
    'useclustermanager', 'markerclusterer_style', 'markerclusterer_zoom', 'markerclusterer_size', 'markerclusterer_minsize', 'markerclusterer_title',
    'markeraction', 'markeractiontype', 'weather_show', 'weather_state', 'weather_cloud', 'weather_cloud_state', 'map_backgroundcolor');
  foreach ($keys AS $key) {
    $getlocations_defaults[$key] = $getlocations_search_defaults[$key];
  }

  #if ($getlocations_search_defaults['use_geolocation_button']) {
  #  $getlocations_defaults['use_jsapi'] = 1;
  #}
  $mapid = getlocations_setup_map($getlocations_defaults);

  getlocations_search_js_settings_do($getlocations_search_defaults, $mapid);
  $getlocations_search_paths = variable_get('getlocations_search_paths', array('getlocations_search_path' => GETLOCATIONS_SEARCH_PATH . '/js/getlocations_search.js'));
  $jsfile = $getlocations_search_paths['getlocations_search_path'];
  $js_opts = array();
  $js_opts['weight'] = $getlocations_defaults['getlocations_js_weight'] + 10;
  $js_opts['type'] = 'file';
  drupal_add_js($jsfile, $js_opts);

  $minmaxes = '';
  #$lla = explode(',', $getlocations_search_defaults['latlong']);
  #$latlons[] = array($lla[0], $lla[1], 0, '', $getlocations_search_defaults['search_map_marker'], '');
  $latlons = array();
  getlocations_js_settings_do($getlocations_defaults, $latlons, $minmaxes, $mapid, FALSE, TRUE);

  $map = theme('getlocations_show', array('width' => $getlocations_defaults['width'] , 'height' => $getlocations_defaults['height'] , 'defaults' => $getlocations_defaults, 'mapid' => $mapid, 'type' => '', 'node' => ''));
  return array('map' => $map, 'mapid' => $mapid);
}

/**
 * @param array $defaults
 *  Settings
 *
 * @param string $mapid
 *  Unique map identifier used in javascript to allow multiple maps
 *
 */
function getlocations_search_js_settings_do($defaults, $mapid) {

  $do_lookup = getlocations_search_do_types();
  $settings = array(
    $mapid => array(
      'method' => $defaults['method'],
      'maxzoom' => $defaults['maxzoom'],
      'do_lookup' => ($do_lookup ? 1 : 0),
      'autocomplete_bias' => $defaults['autocomplete_bias'],
      'restrict_by_country' => $defaults['restrict_by_country'],
      'country' => $defaults['country'],
      'show_distance' => $defaults['show_distance'],
      'search_marker' => $defaults['search_marker'],
      'do_search_marker' => $defaults['do_search_marker'],
    ),
  );

  drupal_add_js(array('getlocations_search' => $settings), 'setting');
}



/**
 * Implements hook_theme().
 *
 * This lets us tell Drupal about our theme functions and their arguments.
 */
function getlocations_search_theme() {
  return array(
    'getlocations_search_form' => array(
      'render element' => 'form',
    ),
    'getlocations_search_settings_form' => array(
      'render element' => 'form',
    ),
    'getlocations_search_block_settings_form' => array(
      'render element' => 'form',
    ),
    'getlocations_search_box' => array(
      'variables' => array(
        'content' => NULL,
      ),
      'template' => 'getlocations_search_box',
    ),
  );
}

/**
 * Themes the search form and results.
 *
 * @param array $variables
 *
 * @return
 *   Returns $output
 *
 */
function theme_getlocations_search_form($variables) {
  $form = $variables['form'];
  $which = $form['which']['#value'];
  unset($form['which']);
  $mapid = $form['mapid']['#value'];
  unset($form['mapid']);
  $output = '';
  $form['getlocations_search_' . $mapid]['#prefix'] = '<div id="getlocations_search_wrapper">';
  $form['getlocations_search_submit']['#suffix'] = '</div>';

  if (getlocations_is_mobile() && isset($form['getlocations_search_geolocation_button_' . $mapid])) {
    $geolocation_button = '<p><input type="submit" value="' . t('Find current Location') . '" title="' . t('Get the latitude and longitude for this location from the browser') . '" id="getlocations_search_geolocation_button" class="form-submit" />&nbsp;<span id="getlocations_search_geolocation_status" ></span></p>';
    $geolocation_button .= '<p>Use the browser to find your current location</p>';
    $form['getlocations_search_geolocation_button_' . $mapid]['#markup'] = $geolocation_button;
  }

  if (isset($form['getlocations_search_country_' . $mapid]['#markup'])) {
    $restrict_country = '<p>' . t('Restrict the search to %c', array('%c' => getlocations_get_country_name($form['getlocations_search_country_' . $mapid]['#markup']))) . '</p>';
    $form['getlocations_search_country_' . $mapid]['#markup'] = $restrict_country;
  }

  $output .= drupal_render_children($form);

  // $which can be page or block so we can change things accordingly
  $output .= "<!-- $which -->";
  $output .= '<div id="getlocations_search' . ($which == 'block' ? '_block' : '') . '_result">';

  $output .= '<h4>' . t('Results') . '</h4>';
  $output .= '<div id="getlocations_search_address_' . $mapid . '"></div>';
  $output .= '<div id="getlocations_search_distance_' . $mapid . '"></div>';
  $output .= '<div id="getlocations_search_count_' . $mapid . '"></div>';
  $output .= '<div id="getlocations_search_type_' . $mapid . '"></div>';
  $output .= '<div id="getlocations_search' . ($which == 'block' ? '_block' : '') . '_latlon_wrapper">';
  $output .= '<div id="getlocations_search_lat_' . $mapid . '" class="getlocations_search' . ($which == 'block' ? '_block' : '') . '_lat"></div>';
  $output .= '<div id="getlocations_search_lon_' . $mapid . '" class="getlocations_search' . ($which == 'block' ? '_block' : '') . '_lon"></div>';
  $output .= '</div>';
  $output .= '</div>';
  // hidden
  $output .= '<div id="getlocations_search_data_' . $mapid . '" class="js-hide">';
  $output .= '<div id="getlocations_search_slat_' . $mapid . '"></div>';
  $output .= '<div id="getlocations_search_slon_' . $mapid . '"></div>';
  $output .= '<div id="getlocations_search_sunit_' . $mapid . '"></div>';
  $output .= '</div>';

  return $output;
}

/**
 * Themes getlocations_search settings form
 *
 * @param array $variables
 *
 * @return
 *   Returns $output
 *
 */
function theme_getlocations_search_settings_form($variables) {
  $form = $variables['form'];
  $output = '';

  if (isset($form['getlocations_search_defaults']['vocab']) ) {
    $form['getlocations_search_defaults']['vocab']['#prefix'] = '<div id="getlocations_search_defaults_vocab">';
    $form['getlocations_search_defaults']['vocab_element']['#suffix'] = '</div>';
  }
  $form['getlocations_search_defaults']['useclustermanager']['#prefix'] = '<div id="wrap-getlocations-clusteropts">';
  $form['getlocations_search_defaults']['markerclusterer_minsize']['#suffix'] = '</div>';

  $form['getlocations_search_defaults']['usemarkermanager']['#prefix'] = '<div id="wrap-getlocations-markeropts">';
  $form['getlocations_search_defaults']['maxzoom']['#suffix'] = '</div>';

  $form['getlocations_search_defaults']['do_search_marker']['#suffix'] = '<div id="wrap-getlocations-search-marker">';
  $form['getlocations_search_defaults']['search_marker']['#suffix'] = '</div>';

  if (module_exists('colorbox')) {
    $getlocations_colorbox = getlocations_colorbox_settings();
    if ($getlocations_colorbox['marker_enable']) {
      $link = getlocations_markerpicker_link($form['getlocations_search_defaults']['search_marker']['#id'], 's');
      $form['getlocations_search_defaults']['search_marker']['#field_suffix'] = '&nbsp;' . $link;
    }
  }

  $output .= drupal_render_children($form);
  return $output;

}

/**
 * Themes getlocations_search settings form
 *
 * @param array $variables
 *
 * @return
 *   Returns $output
 *
 */
function theme_getlocations_search_block_settings_form($variables) {
  $form = $variables['form'];
  $output = '';

  if (isset($form['getlocations_search_block_defaults']['vocab']) ) {
    $form['getlocations_search_block_defaults']['vocab']['#prefix'] = '<div id="getlocations_search_defaults_vocab">';
    $form['getlocations_search_block_defaults']['vocab_element']['#suffix'] = '</div>';
  }
  $form['getlocations_search_block_defaults']['useclustermanager']['#prefix'] = '<div id="wrap-getlocations-clusteropts">';
  $form['getlocations_search_block_defaults']['markerclusterer_minsize']['#suffix'] = '</div>';

  $form['getlocations_search_block_defaults']['usemarkermanager']['#prefix'] = '<div id="wrap-getlocations-markeropts">';
  $form['getlocations_search_block_defaults']['maxzoom']['#suffix'] = '</div>';

  $output .= drupal_render_children($form);
  return $output;
}

/**
 * @param array $variables
 *
 * @return
 *   Modifies $variables in situ
 *
 */
function template_preprocess_getlocations_search_box(&$variables) {

  $getlocations_search_defaults = getlocations_search_defaults();
  $variables['box_width'] = $getlocations_search_defaults['width'];
  $variables['box_height'] = $getlocations_search_defaults['height'];

  if (module_exists('admin_menu')) {
    admin_menu_suppress();
  }

  // Construct page title
  if (drupal_get_title()) {
    $head_title = array(strip_tags(drupal_get_title()), variable_get('site_name', 'Drupal'));
  }
  else {
    $head_title = array(variable_get('site_name', 'Drupal'));
    if (variable_get('site_slogan', '')) {
      $head_title[] = variable_get('site_slogan', '');
    }
  }
  $variables['head_title'] = implode(' | ', $head_title);
  $variables['base_path'] = base_path();
  $variables['head'] = drupal_get_html_head();
  $variables['language'] = $GLOBALS['language'];
  $variables['language']->dir = $GLOBALS['language']->direction ? 'rtl' : 'ltr';
  $variables['css'] = drupal_add_css();
  $variables['styles'] = drupal_get_css();
  $variables['scripts'] = drupal_get_js();
  $variables['title'] = drupal_get_title();
  // Closure should be filled last.
  $variables['closure'] = theme('closure');
  // Compile a list of classes that are going to be applied to the body element.
  // This allows advanced theming based on context (home page, node of certain type, etc.).
  $body_classes = array();
  // Add a class that tells us whether we're on the front page or not.
  $body_classes[] = $variables['is_front'] ? 'front' : 'not-front';
  // Add a class that tells us whether the page is viewed by an authenticated user or not.
  $body_classes[] = $variables['logged_in'] ? 'logged-in' : 'not-logged-in';
  $body_classes[] = 'no-sidebars';
  // Implode with spaces.
  $variables['body_classes'] = implode(' ', $body_classes);

}


/**
 * Set up default settings.
 *
 * @return array $newdefaults
 *
 */
function getlocations_search_defaults() {
  $getlocations_defaults = getlocations_defaults();
  $defaults = array(
    'method' => 'google_ac',
    'vocab' => '',
    'vocab_element' => 'dropdown',
    'search_map_marker' => 'drupal',
    'search_distance' => 1,
    'search_units' => 'km',
    'search_limits' => 0,
    'search_type' => 'all',
    'display_dms' => 0,
    'show_distance' => 0,
    'search_marker' => 'drupal',
    'do_search_marker' => 0,
    'display_search_distance' => 1,
    'display_search_units' => 1,
    'display_search_limits' => 1,
    'display_search_type' => 1,
    'autocomplete_bias' => 0,
    'restrict_by_country' => 0,
    'searchbox_size' => 50,
    'country' => variable_get('site_default_country', ''),
    'width'                     => $getlocations_defaults['width'],
    'height'                    => $getlocations_defaults['height'],
    'styles'                    => $getlocations_defaults['styles'],
    'latlong'                   => $getlocations_defaults['latlong'],
    'zoom'                      => $getlocations_defaults['zoom'],
    'controltype'               => $getlocations_defaults['controltype'],
    'pancontrol'                => $getlocations_defaults['pancontrol'],
    'mtc'                       => $getlocations_defaults['mtc'],
    'maptype'                   => $getlocations_defaults['maptype'],
    'baselayers' => array(
      'Map'                     => $getlocations_defaults['baselayers']['Map'],
      'Satellite'               => $getlocations_defaults['baselayers']['Satellite'],
      'Hybrid'                  => $getlocations_defaults['baselayers']['Hybrid'],
      'Physical'                => $getlocations_defaults['baselayers']['Physical'],
    ),
    'behavior' => array(
      'scale'                   => $getlocations_defaults['behavior']['scale'],
      'overview'                => $getlocations_defaults['behavior']['overview'],
      'overview_opened'         => $getlocations_defaults['behavior']['overview_opened'],
      'scrollwheel'             => $getlocations_defaults['behavior']['scrollwheel'],
    ),
    'draggable'                 => $getlocations_defaults['draggable'],
    'streetview_show'           => $getlocations_defaults['streetview_show'],
    'trafficinfo'               => $getlocations_defaults['trafficinfo'],
    'trafficinfo_state'         => $getlocations_defaults['trafficinfo_state'],
    'bicycleinfo'               => $getlocations_defaults['bicycleinfo'],
    'bicycleinfo_state'         => $getlocations_defaults['bicycleinfo_state'],
    'transitinfo'               => $getlocations_defaults['transitinfo'],
    'transitinfo_state'         => $getlocations_defaults['transitinfo_state'],
    'panoramio_use'             => $getlocations_defaults['panoramio_use'],
    'panoramio_show'            => $getlocations_defaults['panoramio_show'],
    'panoramio_state'           => $getlocations_defaults['panoramio_state'],
    'poi_show'                  => $getlocations_defaults['poi_show'],
    'transit_show'              => $getlocations_defaults['transit_show'],
    'markeraction'              => $getlocations_defaults['markeraction'],
    'markeractiontype'          => $getlocations_defaults['markeractiontype'],
    'minzoom'                   => $getlocations_defaults['minzoom'],
    'maxzoom'                   => $getlocations_defaults['maxzoom'],
    'nodezoom'                  => $getlocations_defaults['nodezoom'],
    'markermanagertype'         => $getlocations_defaults['markermanagertype'],
    'usemarkermanager'          => $getlocations_defaults['usemarkermanager'],
    'useclustermanager'         => $getlocations_defaults['useclustermanager'],
    'markerclusterer_style'     => $getlocations_defaults['markerclusterer_style'],
    'markerclusterer_zoom'      => $getlocations_defaults['markerclusterer_zoom'],
    'markerclusterer_size'      => $getlocations_defaults['markerclusterer_size'],
    'markerclusterer_minsize'   => $getlocations_defaults['markerclusterer_minsize'],
    'markerclusterer_title'     => $getlocations_defaults['markerclusterer_title'],
    'pansetting'                => $getlocations_defaults['pansetting'],
    'use_geolocation_button'    => $getlocations_defaults['use_jsapi'],
    'weather_use'               => $getlocations_defaults['weather_use'],
    'weather_show'              => $getlocations_defaults['weather_show'],
    'weather_state'             => $getlocations_defaults['weather_state'],
    'weather_cloud'             => $getlocations_defaults['weather_cloud'],
    'weather_cloud_state'       => $getlocations_defaults['weather_cloud_state'],
    'map_backgroundcolor'       => $getlocations_defaults['map_backgroundcolor'],
  );

  $settings = variable_get('getlocations_search_defaults', $defaults);
  $getlocations_search_defaults = getlocations_adjust_vars($defaults, $settings);
  return $getlocations_search_defaults;

}

/**
 * @return array $options
 *   Returns list of vocabularies suitable for a dropdown
 */
function getlocations_search_get_vocabularies() {
  if (module_exists('taxonomy')) {
    $vocabularies = taxonomy_get_vocabularies();
    $options = array();
    if (count($vocabularies)) {
      foreach ($vocabularies as $vid => $vocabulary) {
        $options[$vid] = $vocabulary->name;
      }
      return $options;
    }
  }
  return FALSE;
}

/**
 * autocomplete for taxonomy terms
 *
 * @param string $string
 *
 * @return
 *   Returns term names
 *
 */
function getlocations_search_term_autocomplete($string) {
  $matches = array();

  // Taxonomy which holds locative info
  $getlocations_search_defaults = getlocations_search_defaults();
  $vid = FALSE;
  if (is_numeric($getlocations_search_defaults['vocab']) && $getlocations_search_defaults['vocab'] > 0) {
    $vid = $getlocations_search_defaults['vocab'];
  }

  if ($vid) {
    $query = db_select('taxonomy_term_data', 't');
    $query->fields('t', array('name'))
     ->where("LOWER(name) LIKE LOWER(:st)", array(':st' => $string . '%'))
     ->condition('t.vid', $vid, '=')
      ->range(0, 15);
    $result = $query->execute();
    foreach ($result AS $row) {
      $matches[$row->name] = check_plain($row->name);
    }
  }
  drupal_json_output($matches);
}

/**
 * @return array $matches
 *   Returns a list of terms of a given vocabulary, suitable for a dropdown
 */
function getlocations_search_term_get() {
  $matches = array();

  // Taxonomy which holds locative info
  $getlocations_search_defaults = getlocations_search_defaults();
  $vid = FALSE;
  if (is_numeric($getlocations_search_defaults['vocab']) && $getlocations_search_defaults['vocab'] > 0) {
    $vid = $getlocations_search_defaults['vocab'];
  }

  if ($vid) {
    $query = db_select('taxonomy_term_data', 't');
    $query->fields('t', array('name'))
     ->condition('t.vid', $vid, '=');
    $result = $query->execute();
    foreach ($result AS $row) {
      $matches[$row->name] = getlocations_apoclean($row->name);
    }
  }
  ksort($matches);
  return $matches;
}

/**
 * @return json format $output
 *   Returns search result to getlocations_search.js
 *
 */
function getlocations_search_allinfo() {
  $lat = $_GET['lat'];
  $lon = $_GET['lon'];
  $getlocations_search_defaults = getlocations_search_defaults();
  $distance = $getlocations_search_defaults['search_distance'];
  if (isset($_GET['distance']) && is_numeric($_GET['distance'])) {
    $distance = $_GET['distance'];
    // sanity check
    if ($distance < 1) {
      $distance = $getlocations_search_defaults['search_distance'];
    }
  }
  $units = $getlocations_search_defaults['search_units'];
  if (isset($_GET['units'])) {
    $units = $_GET['units'];
    // sanity check
    $unitsarr = array('km', 'm', 'mi', 'yd', 'nmi');
    if (! in_array($units, $unitsarr)) {
      $units = $getlocations_search_defaults['search_units'];
    }
  }
  $type = $getlocations_search_defaults['search_type'];
  if (isset($_GET['type'])) {
    $type = $_GET['type'];
    // sanity check
    $typarr = array('all', 'node', 'user', 'term', 'comment');
    if (! in_array($type, $typarr)) {
      $type = $getlocations_search_defaults['search_type'];
    }
  }

  $dosort = FALSE;
  if (isset($_GET['limits']) && is_numeric($_GET['limits'])) {
    $limits = $_GET['limits'];
    // sanity check
    if ($limits < 0) {
      $limits = 0;
    }
    if ($limits > 0) {
      $dosort = TRUE;
    }
  }

  $dms = ($getlocations_search_defaults['display_dms'] ? TRUE : FALSE);
  // sanity check
  $latlon = $lat . ',' . $lon;
  if (getlocations_latlon_check($latlon)) {
    $output = getlocations_search_info_sql($lat, $lon, $distance, $units, $type, $dosort, $limits, $dms);
    drupal_json_output($output);
  }
}

// $type can be node, user, comment, term. anything else is all
function getlocations_search_info_sql($lat, $lon, $distance, $units, $type, $dosort, $limits, $dms) {

  $getlocations_defaults = getlocations_defaults();

  $distance_meters = getlocations_convert_distance_to_meters($distance, $units);
  $latrange = getlocations_earth_latitude_range($lat, $lon, $distance_meters);
  $lonrange = getlocations_earth_longitude_range($lat, $lon, $distance_meters);

  $locations = array();

  if (module_exists('getlocations_fields')) {
    if ($lonrange[0] > $lonrange[1]) {
      $where = "g.latitude > :minlat AND g.latitude < :maxlat AND ((g.longitude < 180 AND g.longitude > :minlon) OR (g.longitude < :maxlon AND g.longitude > -180))";
    }
    else {
      $where = "g.latitude > :minlat AND g.latitude < :maxlat AND g.longitude > :minlon AND g.longitude < :maxlon";
    }
    $sqlarr = array(':minlat' => $latrange[0], ':maxlat' => $latrange[1], ':minlon' => $lonrange[0], ':maxlon' => $lonrange[1]);

    $fields = array();
    $fields[] = 'g.glid';
    $fields[] = 'g.name';
    $fields[] = 'g.latitude';
    $fields[] = 'g.longitude';
    $fields[] = 'g.marker';

    $fields[] = 'f.nid';
    $fields[] = 'f.uid';
    $fields[] = 'f.tid';
    $fields[] = 'f.cid';

    $sqlsnip1 = "";
    $sqlsnip2 = "";
    $marker = '';
    if ($type == 'node' && user_access('access content') && user_access('access getlocations')) {
      $fields[] = 'n.title AS title';
      $fields[] = 'n.nid';
      $sqlsnip1 = "LEFT JOIN {node} n ON f.vid = n.vid ";
      $sqlsnip2 = "AND n.nid > 0 AND n.status = 1 ";
      $marker = $getlocations_defaults['node_map_marker'];
    }
    elseif ($type == 'user' && getlocations_access_user_location()) {
      $fields[] = 'u.name AS title';
      $fields[] = 'u.uid';
      $sqlsnip1 = "LEFT JOIN {users} u ON f.uid = u.uid ";
      $sqlsnip2 = "AND u.uid > 0 AND u.status = 1 ";
      $marker = $getlocations_defaults['user_map_marker'];
    }
    elseif ($type == 'term' && user_access('access getlocations')) {
      $fields[] = 't.name AS title';
      $fields[] = 't.tid';
      $sqlsnip1 = "LEFT JOIN {taxonomy_term_data} t ON f.tid = t.tid ";
      $sqlsnip2 = "AND t.tid > 0 ";
      $marker = $getlocations_defaults['vocabulary_map_marker'];
    }
    elseif ($type == 'comment' && user_access('access comments') && user_access('access getlocations')) {
      $fields[] = 'c.subject AS title';
      $fields[] = 'c.cid';
      $sqlsnip1 = "LEFT JOIN {comment} c ON f.cid = c.cid ";
      $sqlsnip2 = "AND c.cid > 0 AND c.status = 1 ";
      $marker = $getlocations_defaults['comment_map_marker'];
    }
    elseif ($type == 'all') {
      $sqlsnip2arr = array();
      if (user_access('access content') && user_access('access getlocations')) {
        $sqlsnip2arr[] = "f.nid > 0";
        $sqlsnip2arr[] = "f.tid > 0";
      }
      if (getlocations_access_user_location()) {
        $sqlsnip2arr[] = "f.uid > 0";
      }
      if (user_access('access comments') && user_access('access getlocations')) {
        $sqlsnip2arr[] = "f.cid > 0";
      }
      if (! empty($sqlsnip2arr)) {
        $sqlsnip2 = "AND (" . implode(" OR ", $sqlsnip2arr) . ") ";
      }
      else {
        // this user may not see anything
        $sqlsnip2 = "AND 1=0 ";
      }
    }

    if ($dosort) {
      $sort = getlocations_earth_distance_sql($lat, $lon, 'g');
      $fields[] = "$sort AS distance_sort ";
    }

    $selects = implode(",", $fields);

    $sql = "SELECT $selects ";
    $sql .= "FROM {getlocations_fields} g LEFT JOIN {getlocations_fields_entities} f ON g.glid = f.glid ";
    $sql .= $sqlsnip1;
    $sql .= "WHERE ($where) ";
    $sql .= "AND g.glid IS NOT NULL ";
    $sql .= "AND g.latitude != '0' ";
    $sql .= "AND g.longitude != '0' ";
    $sql .= $sqlsnip2;
    if ($dosort) {
      $sql .= "ORDER BY distance_sort ASC ";
    }
    if ($limits > 0) {
      $sql .= "LIMIT 0, $limits ";
    }

    $location_ct = 0;
    $result = db_query($sql, $sqlarr);
    foreach ($result AS $row) {
      $locations[$location_ct] = $row;
      if (empty($locations[$location_ct]->marker)) {
        if (! empty($marker)) {
          $locations[$location_ct]->marker = $marker;
          if (isset($locations[$location_ct]->nid) && $locations[$location_ct]->nid > 0) {
            $t = getlocations_get_nodetype($locations[$location_ct]->nid);
            if ($t) {
              $typemarkers = getlocations_get_markertypes('node');
              if (isset($typemarkers[$t]) && $typemarkers[$t]) {
                $locations[$location_ct]->marker = $typemarkers[$t];
              }
            }
          }
        }
        else {
          // must be an 'all' search so we have to figure out a marker
          if ($locations[$location_ct]->nid > 0) {
            $locations[$location_ct]->marker = $getlocations_defaults['node_map_marker'];
            $t = getlocations_get_nodetype($locations[$location_ct]->nid);
            if ($t) {
              $typemarkers = getlocations_get_markertypes('node');
              if (isset($typemarkers[$t]) && $typemarkers[$t]) {
                $locations[$location_ct]->marker = $typemarkers[$t];
              }
            }

            // term markers
            $locations[$location_ct]->marker = getlocations_get_term_marker($locations[$location_ct]->nid, $locations[$location_ct]->marker);

          }
          elseif ($locations[$location_ct]->uid > 0) {
            $locations[$location_ct]->marker = $getlocations_defaults['user_map_marker'];
          }
          elseif ($locations[$location_ct]->tid > 0) {
            $locations[$location_ct]->marker = $getlocations_defaults['vocabulary_map_marker'];
          }
          elseif ($locations[$location_ct]->cid > 0) {
            $locations[$location_ct]->marker = $getlocations_defaults['comment_map_marker'];
          }
        }
        // just in case
        if (empty($locations[$location_ct]->marker)) {
          $locations[$location_ct]->marker = $getlocations_defaults['node_map_marker'];
        }
      }
      // ensure we always have a title
      if (! isset($locations[$location_ct]->title) || empty($locations[$location_ct]->title)) {
        if ($locations[$location_ct]->nid > 0) {
          $n = node_load($locations[$location_ct]->nid);
          $locations[$location_ct]->title = $n->title;
          // sanity check
          if ($n->status == 0) {
            unset($locations[$location_ct]);
            continue;
          }
        }
        elseif ($locations[$location_ct]->uid > 0) {
          $u = user_load($locations[$location_ct]->uid);
          $locations[$location_ct]->title = $u->name;
          // sanity check
          if ($u->status == 0) {
            unset($locations[$location_ct]);
            continue;
          }
        }
        elseif ($locations[$location_ct]->tid > 0) {
          $term = taxonomy_term_load($locations[$location_ct]->tid);
          $locations[$location_ct]->title = $term->name;
        }
        elseif ($locations[$location_ct]->cid > 0) {
          $comment = comment_load($locations[$location_ct]->cid);
          $locations[$location_ct]->title = $comment->subject;
          // sanity check
          if ($comment->status == 0) {
            unset($locations[$location_ct]);
            continue;
          }
        }
      }
      $location_ct++;
    }

  } // getlocations_fields sql
  elseif (module_exists('geolocation')) {
    $module = 'geolocation';
    $gtype = 'geolocation_latlng';
    $entity_type = '';
    $fieldnames = getlocations_other_get_fieldname($gtype, $module, $entity_type);
    if (! empty($fieldnames)) {
      $tabledata = array();
      $ct = 0;
      foreach ($fieldnames AS $fieldname) {
        $tabledata[$ct]['table'] = 'field_data_' . $fieldname;
        $tabledata[$ct]['fieldname_latitude'] = $fieldname . '_lat';
        $tabledata[$ct]['fieldname_longitude'] = $fieldname . '_lng';
        $ct++;
      }
    }
  }
  elseif (module_exists('geofield')) {
    $module = 'geofield';
    $gtype = 'geofield';
    $entity_type = '';
    $fieldnames = getlocations_other_get_fieldname($gtype, $module, $entity_type);
    if (! empty($fieldnames)) {
      $tabledata = array();
      $ct = 0;
      foreach ($fieldnames AS $fieldname) {
        $tabledata[$ct]['table'] = 'field_data_' . $fieldname;
        $tabledata[$ct]['fieldname_latitude'] = $fieldname . '_lat';
        $tabledata[$ct]['fieldname_longitude'] = $fieldname . '_lon';
        $ct++;
      }
    }
  }
  if ((module_exists('geolocation') || module_exists('geofield')) && ! empty($fieldnames)) {
    //
    $location_ct = 0;
    foreach ($tabledata AS $data) {
      $table = $data['table'];
      $latfield = 'g.' . $data['fieldname_latitude'];
      $lonfield = 'g.' . $data['fieldname_longitude'];
      if ($lonrange[0] > $lonrange[1]) {
        $where = "$latfield > :minlat AND $latfield < :maxlat AND (($lonfield < 180 AND $lonfield > :minlon) OR ($lonfield < :maxlon AND $lonfield > -180))";
      }
      else {
        $where = "$latfield > :minlat AND $latfield < :maxlat AND $lonfield > :minlon AND $lonfield < :maxlon";
      }
      $sqlarr = array(':minlat' => $latrange[0], ':maxlat' => $latrange[1], ':minlon' => $lonrange[0], ':maxlon' => $lonrange[1]);

      $fields = array();
      $fields[] = "$latfield AS latitude";
      $fields[] = "$lonfield AS longitude";
      $fields[] = "g.entity_type AS entity_type";
      $fields[] = "g.entity_id AS entity_id";

      $sqlsnip1 = "";
      $sqlsnip2 = "";
      $marker = '';
      if ($type == 'node' && user_access('access content') && user_access('access getlocations')) {
        $fields[] = 'n.title AS title';
        $fields[] = 'n.nid';
        $sqlsnip1 = "LEFT JOIN {node} n ON g.entity_id = n.nid ";
        $sqlsnip2 = "AND g.entity_type = :type AND n.nid > 0 AND n.status = 1 ";
        $sqlarr[':type'] = $type;
        $marker = $getlocations_defaults['node_map_marker'];
      }
      elseif ($type == 'user' && getlocations_access_user_location()) {
        $fields[] = 'u.name AS title';
        $fields[] = 'u.uid';
        $sqlsnip1 = "LEFT JOIN {users} u ON g.entity_id = u.uid ";
        $sqlsnip2 = "AND g.entity_type = :type AND u.uid > 0 AND u.status = 1 ";
        $sqlarr[':type'] = $type;
        $marker = $getlocations_defaults['user_map_marker'];
      }
      elseif ($type == 'term' && user_access('access getlocations')) {
        $fields[] = 't.name AS title';
        $fields[] = 't.tid';
        $sqlsnip1 = "LEFT JOIN {taxonomy_term_data} t ON g.entity_id = t.tid ";
        $sqlsnip2 = "AND g.entity_type = :type AND t.tid > 0 ";
        $sqlarr[':type'] = $type;
        $marker = $getlocations_defaults['vocabulary_map_marker'];
      }
      elseif ($type == 'comment' && user_access('access comments') && user_access('access getlocations')) {
        $fields[] = 'c.subject AS title';
        $fields[] = 'c.cid';
        $sqlsnip1 = "LEFT JOIN {comment} c ON g.entity_id = c.cid ";
        $sqlsnip2 = "AND g.entity_type = :type AND c.cid > 0 AND c.status = 1 ";
        $sqlarr[':type'] = $type;
        $marker = $getlocations_defaults['comment_map_marker'];
      }
      elseif ($type == 'all') {
        // need a list of all the entity_types in this table so that we can limit on permissions
        $sqlsnip2arr = array();
        $permitted_entity_types = array();
        if (user_access('access content') && user_access('access getlocations')) {
          $permitted_entity_types[] = 'node';
        }
        if (getlocations_access_user_location()) {
          $permitted_entity_types[] = 'user';
        }
        if (user_access('access getlocations')) {
          $permitted_entity_types[] = 'term';
        }
        if (user_access('access comments') && user_access('access getlocations')) {
          $permitted_entity_types[] = 'comment';
        }

        $sql = "SELECT DISTINCT entity_type FROM {$table} ";
        $rows = db_query($sql);
        $at = '';
        $ct = 1;
        $sqlsnip2 = '';
        foreach ($rows AS $row) {
          $et = $row->entity_type;
          if (in_array($et, $permitted_entity_types)) {
            $sqlsnip2arr[] = "g.entity_type = :et_$ct";
            $sqlarr[":et_$ct"] = $et;
            $ct++;
          }
        }
        if (! empty($sqlsnip2arr)) {
          $sqlsnip2 = "AND (" . implode(" OR ", $sqlsnip2arr) . ") ";
        }
        else {
          // this user may not see anything
          $sqlsnip2 = "AND 1=0 ";
        }
      }

      if ($dosort) {
        $sort = getlocations_earth_distance_sql($lat, $lon, 'g');
        $fields[] = "$sort AS distance_sort ";
      }

      $selects = implode(",", $fields);

      $sql = "SELECT $selects FROM {$table} g ";
      $sql .= $sqlsnip1;
      $sql .= "WHERE ($where) ";
      $sql .= "AND $latfield != '0' ";
      $sql .= "AND $lonfield != '0' ";
      $sql .= $sqlsnip2;
      if ($dosort) {
        $sql .= "ORDER BY distance_sort ASC ";
      }
      if ($limits > 0) {
        $sql .= "LIMIT 0, $limits ";
      }
      $result = db_query($sql, $sqlarr);
      foreach ($result AS $row) {
        $locations[$location_ct]->latitude = $row->latitude;
        $locations[$location_ct]->longitude = $row->longitude;
        if (isset($row->title)) {
          $locations[$location_ct]->title = $row->title;
        }
        if ($row->entity_type == 'node') {
          $locations[$location_ct]->nid = $row->entity_id;
          $locations[$location_ct]->marker = $getlocations_defaults['node_map_marker'];
          // term markers
          $locations[$location_ct]->marker = getlocations_get_term_marker($row->entity_id, $locations[$location_ct]->marker);
          $n = node_load($locations[$location_ct]->nid);
          // sanity check
          if ($n->status == 0) {
            unset($locations[$location_ct]);
          }
        }
        elseif ($row->entity_type == 'user') {
          $locations[$location_ct]->uid = $row->entity_id;
          $locations[$location_ct]->marker = $getlocations_defaults['user_map_marker'];
          $u = user_load($locations[$location_ct]->uid);
          // sanity check
          if ($u->status == 0) {
            unset($locations[$location_ct]);
          }
        }
        elseif ($row->entity_type == 'term') {
          $locations[$location_ct]->tid = $row->entity_id;
          $locations[$location_ct]->marker = $getlocations_defaults['vocabulary_map_marker'];
        }
        elseif ($row->entity_type == 'comment') {
          $locations[$location_ct]->cid = $row->entity_id;
          $locations[$location_ct]->marker = $getlocations_defaults['comment_map_marker'];
          $comment = comment_load($locations[$location_ct]->cid);
          // sanity check
          if ($comment->status == 0) {
            unset($locations[$location_ct]);
          }
        }
        // just in case
        if (isset($locations[$location_ct]) && empty($locations[$location_ct]->marker)) {
          $locations[$location_ct]->marker = $getlocations_defaults['node_map_marker'];
        }
        $location_ct++;
      }
    }
  }

  $minmaxes = $latrange[0] . ',' . $lonrange[0] . ',' . $latrange[1] . ',' . $lonrange[1];
  // format lat/lon
  if ($dms) {
    $latout = theme('getlocations_latitude_dms', array('latitude' => $lat));
    $lonout = theme('getlocations_longitude_dms', array('longitude' => $lon));
  }
  else {
    $latout = round($lat, 6);
    $lonout = round($lon, 6);
  }
  $infoarr = array($distance, $units, ($type ? $type : 'all'), $latout, $lonout);
  $info = implode(",", $infoarr);
  $ret = array('locations' => $locations, 'minmaxes' => $minmaxes, 'info' => $info);

  return $ret;

}

function getlocations_search_do_types() {
  $return = FALSE;
  if (module_exists('getlocations_fields')) {
    $return = TRUE;
  }
  elseif (module_exists('geolocation')) {
    $return = TRUE;
  }
  elseif (module_exists('geofield')) {
    $return = TRUE;
  }

  return $return;
}

/**
 * Implements hook_block_info().
 *
 * This hook declares what blocks are provided by the module.
 */
function getlocations_search_block_info() {
  $blocks = array();
  $blocks['getlocations_search_block'] = array(
    'info' => t("Getlocations search."),
  );
  return $blocks;

}


/**
 * Implements hook_block_view().
 *
 * This hook generates the contents of the blocks themselves.
 */
function getlocations_search_block_view($delta = '') {

  $block = array();
  //The $delta parameter tells us which block is being requested.
  switch ($delta) {
    case 'getlocations_search_block':
      $block['subject'] = t('Getlocations search');
      $block['content'] = getlocations_search('block');
      break;
  }
  return $block;

}

/**
 * Implements hook_block_configure().
 *
 * This hook declares configuration options for blocks provided by this module.
 */
function getlocations_search_block_configure($delta = '') {
  module_load_include('inc', 'getlocations_search', 'getlocations_search.admin');
  $settings = getlocations_search_block_get_var();
  $form = array();
  switch ($delta) {
    case 'getlocations_search_block':
      $form = _getlocations_search_settings_form($settings, 'block');
      $form['#theme'] = 'getlocations_search_block_settings_form';
      break;
  }
  return $form;
}


/**
 * Implements hook_block_save().
 *
 * This hook declares how the configured options for a block
 * provided by this module are saved.
 */
function getlocations_search_block_save($delta = '', $edit = array()) {
  // We need to save settings from the configuration form.
  // $delta contains the block name.
  $set = array();
  switch ($delta) {
    case 'getlocations_search_block':
      if (isset($edit['getlocations_search_block_defaults']) ) {
        getlocations_search_block_set_var($edit['getlocations_search_block_defaults']);
      }
    break;
  }
}


/**
 * Load the getlocations_blocks variables array
 *
 * @return array
 */
function getlocations_search_block_get_var() {
  $defaults = getlocations_search_block_defaults();
  $var = variable_get('getlocations_search_block', $defaults);
  $newvar = getlocations_adjust_vars($defaults, $var);
  return $newvar;
}

/**
 * Save the getlocations_blocks variables array
 *
 * @param array $var
 */
function getlocations_search_block_set_var($var) {
  $defaults = getlocations_search_block_get_var();
  $newvar = getlocations_adjust_vars($defaults, $var);
  variable_set('getlocations_search_block', $newvar);
}

function getlocations_search_block_defaults() {
  $defaults = getlocations_search_defaults();
  return $defaults;
}
