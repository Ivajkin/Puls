<?php

/**
 * @file
 * @author Bob Hutchinson http://drupal.org/user/52366
 * @copyright GNU GPL
 *
 * Displays locations on a map.
 * for Drupal 7
 * using version 3 googlemaps API
 */

define('GETLOCATIONS_PATH', drupal_get_path('module', 'getlocations'));

/**
 * Implements hook_help().
 */
function getlocations_help($path, $arg) {
  switch ($path) {
    case 'admin/help#getlocations':
      $output = '<p>' . t('Displays locations on a map.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_init().
 */
function getlocations_init() {
  module_load_include('inc', 'getlocations', 'getlocations.theme');

  if (module_exists('colorbox')) {
    $getlocations_colorbox = getlocations_colorbox_settings();
    $settings = array('getlocations_colorbox' => $getlocations_colorbox);
    drupal_add_js($settings, 'setting');
    drupal_add_js(GETLOCATIONS_PATH . '/js/getlocations_colorbox.js');
  }

  $getlocations_defaults = getlocations_defaults();
  if ($getlocations_defaults['markermanagertype'] == 2) {
    if (file_exists(GETLOCATIONS_PATH . '/getlocations.markercluster_override.inc')) {
      module_load_include('inc', 'getlocations', 'getlocations.markercluster_override');
    }
    else {
      module_load_include('inc', 'getlocations', 'getlocations.markercluster');
    }
    $markerclusterer_styles = getlocations_get_markerclusterer_styles();
    drupal_add_js(array('getlocations_markerclusterer' => $markerclusterer_styles), 'setting');
  }
}

/**
 * Implements hook_permission().
 */
function getlocations_permission() {
  $perms = array();
  $perms['access getlocations'] = array(
    'title' => t('Access Getlocations'),
    'description' => t('View and use the Getlocations module.')
  );
  $perms['access user getlocations'] = array(
    'title' => t('Access User locations'),
    'description' => t('View User locations with Getlocation maps.')
  );
  return $perms;
}

/**
 * Implements hook_flush_caches().
 */
function getlocations_flush_caches() {
  getlocations_regenerate_markers();
}

/**
 * Implements hook_views_api().
 */
function getlocations_views_api() {
  return array(
    'api' => 3,
    'path' => GETLOCATIONS_PATH . '/views',
  );
}

/**
 * Implements hook_menu().
 */
function getlocations_menu() {
  $items = array();

  $items['admin/config/services/getlocations'] = array(
    'title' => 'Get locations',
    'description' => 'Configure Get locations',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('getlocations_settings_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'getlocations.admin.inc',
  );

  // getlocations/node/$nid    # show all location on one node
  $items['getlocations/node/%getlocations_id'] = array(
    'title' => 'Get locations',
    'access callback' => 'getlocations_access_location',
    'page callback' => 'getlocations_nodemap',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
  );

  if (getlocations_check_entity_type('user') || getlocations_check_entity_type('profile2')) {
    // getlocations/user/$uid    # show all locations for a user
    $items['getlocations/user/%getlocations_id'] = array(
      'title' => 'Get user locations',
      'access callback' => 'getlocations_access_user_location',
      'page callback' => 'getlocations_usermap',
      'page arguments' => array(2),
      'type' => MENU_CALLBACK,
    );
    // getlocations/users    # show all locations for all users
    $items['getlocations/users'] = array(
      'title' => 'View all user locations',
      'access callback' => 'getlocations_access_user_location',
      'page callback' => 'getlocations_usersmap',
      'type' => MENU_CALLBACK,
    );
  }
  if (module_exists('taxonomy')) {
    // getlocations/term/$tid    # show all locations for a term
    $items['getlocations/term/%getlocations_id'] = array(
      'title' => 'Get term locations',
      'access callback' => 'getlocations_access_location',
      'page callback' => 'getlocations_termmap',
      'page arguments' => array(2),
      'type' => MENU_CALLBACK,
    );
  }
  if (module_exists('comment')) {
    if (getlocations_check_entity_type('comment')) {
      // getlocations/comment/$cid    # show all locations for a comment
      $items['getlocations/comment/%getlocations_id'] = array(
        'title' => 'Get comment locations',
        'access callback' => 'getlocations_access_location',
        'page callback' => 'getlocations_commentmap',
        'page arguments' => array(2),
        'type' => MENU_CALLBACK,
      );
    }
  }

  // getlocations/type/$type     # show all locations of nodes of content-type machine name
  $items['getlocations/type/%getlocations_type'] = array(
    'title' => 'Get locations',
    'access callback' => 'getlocations_access_location',
    'page callback' => 'getlocations_typemap',
    'page arguments' => array(2, 3, 4),
    'type' => MENU_CALLBACK,
  );

  // getlocations/lids/1,2,3,4    # show lids
  $items['getlocations/lids/%getlocations_cdints'] = array(
    'title' => 'Get locations',
    'access callback' => 'getlocations_access_location',
    'page callback' => 'getlocations_lids',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
  );

  // getlocations/nids/1,2,3,4    # show nids locations
  $items['getlocations/nids/%getlocations_cdints'] = array(
    'title' => 'Get locations',
    'access callback' => 'getlocations_access_location',
    'page callback' => 'getlocations_nids',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
  );

  // getlocations/info?lid     # ajax callback to fetch an address
  $items['getlocations/info'] = array(
    'page callback' => 'getlocations_info',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  // getlocations/lidinfo?lid    # ajax callback to fetch a link to the 'owner'
  $items['getlocations/lidinfo'] = array(
    'page callback' => 'getlocations_lidinfo',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['getlocations_box'] = array(
    'title' => 'Get locations',
    'access arguments' => array('access getlocations'),
    'page callback' => 'getlocations_box',
    'type' => MENU_CALLBACK,
  );
  $items['getlocations/markerinfo'] = array(
    'access callback' => TRUE,
    'page callback' => 'getlocations_markerinfo',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * menu placeholder functions
 */
function getlocations_id_load($arg) {
  return (is_numeric($arg) && $arg > 0 ? $arg : FALSE);
}

/**
 * Check that the node type exists
 *
 */
function getlocations_type_load($arg) {
  $query = db_select('node_type', 'n')->fields('n', array('type'))->condition('n.type', $arg);
  $row = $query->execute()->fetchAssoc();
  return ((isset($row['type']) && $row['type']) ? $arg : FALSE);
}

function getlocations_cdints_load($arg) {
  $arr = explode(',', $arg);
  foreach ($arr AS $a) {
    if (! is_numeric($a) || $a < 1 ) {
      return FALSE;
    }
  }
  return $arg;
}

/**
 * menu access functions
 */
function getlocations_access_location() {
  if (user_access('access getlocations')) {
    $modules = getlocations_supported_modules();
    foreach ($modules AS $module) {
      if (module_exists($module)) {
        return TRUE;
      }
    }
  }
  return FALSE;
}

function getlocations_access_user_location() {
  if (user_access('access user getlocations') && user_access('access user profiles')) {
    $modules = getlocations_supported_modules();
    foreach ($modules AS $module) {
      if (module_exists($module)) {
        return TRUE;
      }
    }
  }
  return FALSE;
}

/**
 * Menu callback
 *
 * @param int $nid
 *
 * @return
 *   Returns a map of locations of a node
 *
 */
function getlocations_nodemap($nid) {

  $vid = getlocations_get_vid($nid);
  $locations = getlocations_load_locations($vid);
  $node = node_load($nid);

  $getlocations_defaults = getlocations_defaults();
  $marker = $getlocations_defaults['node_map_marker'];
  $typemarkers = getlocations_get_markertypes('node');
  if (isset($typemarkers[$node->type]) && $typemarkers[$node->type]) {
    $marker = $typemarkers[$node->type];
  }
  $latlons = array();
  $minmaxes = array('minlat' => 0, 'minlon' => 0, 'maxlat' => 0, 'maxlon' => 0);
  $ct = 0;
  if (count($locations)) {
    // we should loop over them and dump bummers with no lat/lon
    foreach ($locations AS $key => $location) {
      if (getlocations_latlon_check($location['latitude'] . ',' . $location['longitude']) ) {
        $minmaxes = getlocations_do_minmaxes($ct, $location, $minmaxes);
        if (! isset($location['key'])) {
          $location['key'] = '';
        }
        else {
          if ($location['key'] == 'nid') {
            $location['lid'] = $nid;
          }
          elseif ($location['key'] == 'vid') {
            $location['lid'] = $nid;
          }
        }

        // term markers
        $marker = getlocations_get_term_marker($nid, $marker);

        // per location marker
        if (isset($location['marker']) && ! empty($location['marker'])) {
          $marker = $location['marker'];
        }
        $ct++;
        $name = htmlspecialchars_decode($location['name'] ? strip_tags($location['name']) : strip_tags($node->title), ENT_QUOTES);
        $latlons[] = array($location['latitude'], $location['longitude'], $location['lid'], $name, $marker, $location['key']);
      }
    }
  }
  if ($ct < 2 ) {
    unset($minmaxes);
    $minmaxes = '';
  }

  drupal_set_title(t('View !t locations', array('!t' => $node->title)));

  // all in $newlocations
  return getlocations_setlocations($latlons, $minmaxes, 'node', $node);

}

/**
 * Menu callback
 *
 * @param int $uid
 *
 * @return
 *   Returns a map of locations of a user
 *
 */
function getlocations_usermap($uid) {

  $getlocations_defaults = getlocations_defaults();

  $marker = $getlocations_defaults['user_map_marker'];
  $locations = getlocations_load_locations($uid, 'uid');
  $account = user_load($uid);
  $latlons = array();
  $minmaxes = array('minlat' => 0, 'minlon' => 0, 'maxlat' => 0, 'maxlon' => 0);
  $ct = 0;
  if (count($locations)) {
    // we should loop over them and dump bummers with no lat/lon
    foreach ($locations AS $key => $location) {
      if (getlocations_latlon_check($location['latitude'] . ',' . $location['longitude']) ) {
        $minmaxes = getlocations_do_minmaxes($ct, $location, $minmaxes);
        if (! isset($location['key'])) {
          $location['key'] = '';
        }
        else {
          $location['lid'] = $uid;
        }
        // per location marker
        if (isset($location['marker']) && ! empty($location['marker'])) {
          $marker = $location['marker'];
        }
        $ct++;
        $name = htmlspecialchars_decode($location['name'] ? strip_tags($location['name']) : strip_tags($account->name), ENT_QUOTES);
        $latlons[] = array($location['latitude'], $location['longitude'], $location['lid'], $name, $marker, $location['key']);
      }
    }
  }
  if ($ct < 2 ) {
    unset($minmaxes);
    $minmaxes = '';
  }

  drupal_set_title(t('View user !t locations', array('!t' => $account->name)));

  return getlocations_setlocations($latlons, $minmaxes, 'user', $account);

}

/**
 * Menu callback
 *
 *
 * @return
 *   Returns a map of locations of all the users
 *
 */
function getlocations_usersmap() {

  $getlocations_defaults = getlocations_defaults();
  $marker = $getlocations_defaults['user_map_marker'];
  $latlons = array();
  $minmaxes = array('minlat' => 0, 'minlon' => 0, 'maxlat' => 0, 'maxlon' => 0);
  $query = db_select('users', 'u')->fields('u', array('uid', 'name'))->condition('u.status', 1);
  $rows = $query->execute();
  $ct = 0;
  foreach ($rows AS $row) {
    $uid = $row->uid;
    $locations = getlocations_load_locations($uid, 'uid');
    if (count($locations)) {
      // we should loop over them and dump bummers with no lat/lon
      foreach ($locations AS $key => $location) {
        if (getlocations_latlon_check($location['latitude'] . ',' . $location['longitude']) ) {
          $minmaxes = getlocations_do_minmaxes($ct, $location, $minmaxes);
          if (! isset($location['key'])) {
            $location['key'] = '';
          }
          else {
            $location['lid'] = $uid;
          }
          // per location marker
          if (isset($location['marker']) && ! empty($location['marker'])) {
            $marker = $location['marker'];
          }
          $ct++;
          $name = htmlspecialchars_decode($location['name'] ? strip_tags($location['name']) : strip_tags($row->name), ENT_QUOTES);
          $latlons[] = array($location['latitude'], $location['longitude'], $location['lid'], $name, $marker, $location['key']);
        }
      }
    }
  }

  if ($ct < 2 ) {
    unset($minmaxes);
    $minmaxes = '';
  }
  return getlocations_setlocations($latlons, $minmaxes, 'users');

}

/**
 * Menu callback
 *
 * @param int $tid
 *
 * @return
 *   Returns a map of locations of a term
 *
 */
function getlocations_termmap($tid) {
  if (module_exists('taxonomy')) {
    $locations = getlocations_load_locations($tid, 'tid');
    $term = taxonomy_term_load($tid);
    $getlocations_defaults = getlocations_defaults();
    $marker = $getlocations_defaults['vocabulary_map_marker'];
    $typemarkers = getlocations_get_markertypes('vocabulary');
    if (isset($typemarkers[$term->vid]) && $typemarkers[$term->vid]) {
      $marker = $typemarkers[$term->vid];
    }
    $latlons = array();
    $minmaxes = array('minlat' => 0, 'minlon' => 0, 'maxlat' => 0, 'maxlon' => 0);
    $ct = 0;
    if (count($locations)) {
      // we should loop over them and dump bummers with no lat/lon
      foreach ($locations AS $key => $location) {
        if (getlocations_latlon_check($location['latitude'] . ',' . $location['longitude']) ) {
          $minmaxes = getlocations_do_minmaxes($ct, $location, $minmaxes);
          if (! isset($location['key'])) {
            $location['key'] = '';
          }
          else {
            $location['lid'] = $tid;
          }
          // per location marker
          if (isset($location['marker']) && ! empty($location['marker'])) {
            $marker = $location['marker'];
          }
          $ct++;
          $name = htmlspecialchars_decode($location['name'] ? strip_tags($location['name']) : strip_tags($term->name), ENT_QUOTES);
          $latlons[] = array($location['latitude'], $location['longitude'], $location['lid'], $name, $marker, $location['key']);
        }
      }
    }
    if ($ct < 2 ) {
      unset($minmaxes);
      $minmaxes = '';
    }

    drupal_set_title(t('View term !t locations', array('!t' => $term->name)));

    return getlocations_setlocations($latlons, $minmaxes, 'term', $term);

  }
}

function getlocations_commentmap($cid) {
  if (module_exists('comment')) {
    $locations = getlocations_load_locations($cid, 'cid');
    $comment = comment_load($cid);
    $getlocations_defaults = getlocations_defaults();
    $marker = $getlocations_defaults['comment_map_marker'];
    $latlons = array();
    $minmaxes = array('minlat' => 0, 'minlon' => 0, 'maxlat' => 0, 'maxlon' => 0);
    $ct = 0;
    if (count($locations)) {
      // we should loop over them and dump bummers with no lat/lon
      foreach ($locations AS $key => $location) {
        if (getlocations_latlon_check($location['latitude'] . ',' . $location['longitude']) ) {
          $minmaxes = getlocations_do_minmaxes($ct, $location, $minmaxes);
          if (! isset($location['key'])) {
            $location['key'] = '';
          }
          else {
            $location['lid'] = $cid;
          }
          // per location marker
          if (isset($location['marker']) && ! empty($location['marker'])) {
            $marker = $location['marker'];
          }
          $ct++;
          $name = htmlspecialchars_decode($location['name'] ? strip_tags($location['name']) : strip_tags($comment->subject), ENT_QUOTES);
          $latlons[] = array($location['latitude'], $location['longitude'], $location['lid'], $name, $marker, $location['key']);
        }
      }
    }
    if ($ct < 2 ) {
      unset($minmaxes);
      $minmaxes = '';
    }

    drupal_set_title(t('View comment !t locations', array('!t' => $comment->subject)));

    return getlocations_setlocations($latlons, $minmaxes, 'comment', $comment);

  }
}

/**
 * Menu callback
 *
 * @param string $type
 * A location enabled content type
 *
 * @return
 *   Returns a map of locations of all nodes of content-type $type
 *
 */
function getlocations_typemap($type, $loc_key='', $loc_val = '') {
  $getlocations_defaults = getlocations_defaults();
  $marker = $getlocations_defaults['node_map_marker'];
  $typemarkers = getlocations_get_markertypes('node');
  if (isset($typemarkers[$type]) && $typemarkers[$type]) {
    $marker = $typemarkers[$type];
  }

  $latlons = array();
  $minmaxes = array('minlat' => 0, 'minlon' => 0, 'maxlat' => 0, 'maxlon' => 0);
  $query = db_select('node', 'n')->fields('n', array('nid', 'title'))->condition('n.type', $type);
  $rows = $query->execute();
  $ct = 0;
  foreach ($rows AS $row) {
    $nid = $row->nid;
    $vid = getlocations_get_vid($nid);
    $locations = getlocations_load_locations($vid);
    if (count($locations)) {
      // we should loop over them and dump bummers with no lat/lon
      foreach ($locations AS $key => $location) {
        if (getlocations_latlon_check($location['latitude'] . ',' . $location['longitude']) ) {
          if ($loc_key && isset($location[$loc_key])) {
            if (drupal_strtolower($location[$loc_key]) != drupal_strtolower($loc_val)) {
              continue;
            }
          }
          $minmaxes = getlocations_do_minmaxes($ct, $location, $minmaxes);
          if (! isset($location['key'])) {
            $location['key'] = '';
          }
          else {
            if ($location['key'] == 'nid') {
              $location['lid'] = $nid;
            }
            elseif ($location['key'] == 'vid') {
              $location['lid'] = $vid;
            }
          }

          // term markers
          $marker = getlocations_get_term_marker($nid, $marker);

          // per location marker
          if (isset($location['marker']) && ! empty($location['marker'])) {
            $marker = $location['marker'];
          }
          $ct++;
          $name = htmlspecialchars_decode($location['name'] ? strip_tags($location['name']) : strip_tags($row->title), ENT_QUOTES);
          $latlons[] = array($location['latitude'], $location['longitude'], $location['lid'], $name, $marker, $location['key']);
        }
      }
    }
  }
  if ($ct < 2 ) {
    unset($minmaxes);
    $minmaxes = '';
  }
  return getlocations_setlocations($latlons, $minmaxes, $type);
}

/**
 * Menu callback
 *
 * @param string $lidlist
 * A comma-delimited list of location ids
 *
 * @return
 *   Returns a map of locations.
 *
 */
function getlocations_lids($lidlist) {
  $lidarr = explode(',', $lidlist);
  $locations = array();
  $latlons = array();
  $minmaxes = array('minlat' => 0, 'minlon' => 0, 'maxlat' => 0, 'maxlon' => 0);
  $marker = '';
  $ct = 0;

  foreach ($lidarr AS $lid) {
    $locations[] = getlocations_load_location($lid);
  }
  if (count($locations)) {
    // we should loop over them and dump bummers with no lat/lon
    foreach ($locations AS $key => $location) {
      if (getlocations_latlon_check($location['latitude'] . ',' . $location['longitude']) ) {
        $minmaxes = getlocations_do_minmaxes($ct, $location, $minmaxes);
        $location['key'] = '';
        $ct++;
        $name = htmlspecialchars_decode(strip_tags($location['name']), ENT_QUOTES);
        $latlons[] = array($location['latitude'], $location['longitude'], $location['lid'], $name, $location['marker'], $location['key']);
      }
    }
  }
  if ($ct < 2 ) {
    unset($minmaxes);
    $minmaxes = '';
  }
  return getlocations_setlocations($latlons, $minmaxes, 'lids');

}

/**
 * Menu callback
 *
 * @param string $nidlist
 * A comma-delimited list of node ids
 *
 * @return
 *   Returns a map of locations.
 *
 */
function getlocations_nids($nidlist) {
  $nidarr = explode(',', $nidlist);
  $locations = array();
  $latlons = array();
  $minmaxes = array('minlat' => 0, 'minlon' => 0, 'maxlat' => 0, 'maxlon' => 0);
  $typemarkers = getlocations_get_markertypes('node');
  $ct = 0;

  foreach ($nidarr AS $nid) {
    $vid = getlocations_get_vid($nid);
    $locs = getlocations_load_locations($vid);
    if (count($locs)) {
      foreach ($locs AS $key => $loc) {
        $type = getlocations_get_nodetype($nid);
        $loc['marker'] = $typemarkers[$type];
        $locations[] = $loc;
      }
    }
  }
  if (count($locations)) {
    // we should loop over them and dump bummers with no lat/lon
    foreach ($locations AS $key => $location) {
      if (getlocations_latlon_check($location['latitude'] . ',' . $location['longitude']) ) {
        $minmaxes = getlocations_do_minmaxes($ct, $location, $minmaxes);
        if (! isset($location['key'])) {
          $location['key'] = '';
        }
        else {
          if ($location['key'] == 'nid') {
            $location['lid'] = $nid;
          }
          elseif ($location['key'] == 'vid') {
            $location['lid'] = $vid;
          }
        }
        $ct++;
        $name = htmlspecialchars_decode(strip_tags($location['name']), ENT_QUOTES);
        $latlons[] = array($location['latitude'], $location['longitude'], $location['lid'], $name, $location['marker'], $location['key']);
      }
    }
  }
  if ($ct < 2 ) {
    unset($minmaxes);
    $minmaxes = '';
  }
  return getlocations_setlocations($latlons, $minmaxes, 'nids');
}

/**
 * Set up javascript settings and map
 */
function getlocations_setlocations($latlons, $minmaxes='', $type='node', $node = '', $width='', $height='') {
  if (! getlocations_defaults_check()) {
    return t('You need to !c first.', array('!c' => l('Configure Getlocations', 'admin/config/services/getlocations')));
  }
  global $language;
  $getlocations_defaults = getlocations_defaults();
  $mapid = getlocations_setup_map($getlocations_defaults);
  getlocations_js_settings_do($getlocations_defaults, $latlons, $minmaxes, $mapid);

  if (empty($width)) {
    $width = $getlocations_defaults['width'];
  }
  if (empty($height)) {
    $height = $getlocations_defaults['height'];
  }

  return theme('getlocations_show', array('width' => $width, 'height' => $height, 'defaults' => $getlocations_defaults, 'mapid' => $mapid, 'type' => $type, 'node' => $node));

}

/**
 * Function to setup the map scripts
 *
 * @param $defaults
 *   Required. the current settings.
 * Sets up the call to googlemaps, css and the relevant getlocations js in html head
 */
function getlocations_setup_map($defaults) {
  static $getlocations_mapid;
  if (! isset($getlocations_mapid) || empty($getlocations_mapid)) {
    $getlocations_mapid = 0;
  }
  $getlocations_mapid++;
  getlocations_setup_js($defaults);
  // Generate unique Map ID.
  $mapid = 'key_' . $getlocations_mapid;
  return $mapid;
}

/**
 * Function to setup the map scripts
 *
 * @param $defaults
 *   Required. the current settings.
 * Sets up the call to googlemaps, css and the relevant getlocations js in html head
 */
function getlocations_setup_js($defaults, $googleonly = FALSE) {
  global $language;

  $current_js = drupal_get_js();
  $current_css = drupal_get_css();

  $js_weight = 1;
  if (is_numeric($defaults['getlocations_js_weight']) && $defaults['getlocations_js_weight'] != 0) {
    $js_weight = $defaults['getlocations_js_weight'];
  }

  $key = variable_get('getlocations_api3_key', '');

  // v3 googlemaps API
  $query = array();
  if (! empty($key)) {
    $query['key'] = $key;
  }
  $query['sensor'] = (getlocations_is_mobile() ? 'true' : 'false');
  $query['language'] = (isset($language->language) ? $language->language : 'und');

  $libraries = array();
  if ($defaults['panoramio_use']) {
    $libraries[] = 'panoramio';
  }
  if ($defaults['places'] || module_exists('getlocations_search')) {
    $libraries[] = 'places';
  }
  // not active yet
  if ($defaults['geometry']) {
    $libraries[] = 'geometry';
  }
  if ($defaults['weather_use']) {
    $libraries[] = 'weather';
  }
  // more libraries here

  // load libraries if any
  if (count($libraries)) {
    $query['libraries'] = implode(',', $libraries);
  }

  $scheme = ((isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] == 'on') ? 'https' : 'http');

  $gmapdomain = "maps.google.com/maps/api/js";
  if (! empty($key)) {
    $gmapdomain = "maps.googleapis.com/maps/api/js";
  }
  $gmaplink = url($scheme . '://' . $gmapdomain, array('query' => $query));
  if (!stristr($current_js, $scheme . '://' . $gmapdomain)) {
    $js_opts = array();
    $js_opts['weight'] = $js_weight;
    $js_opts['type'] = 'external';
    drupal_add_js($gmaplink, $js_opts);
    $js_weight++;
  }
  if ($defaults['use_jsapi']) {
    $jsapilink =  url($scheme . '://' . 'www.google.com/jsapi');
    if (!stristr($current_js, $jsapilink)) {
       $js_opts = array();
       $js_opts['weight'] = $js_weight;
       $js_opts['type'] = 'external';
      drupal_add_js($jsapilink, $js_opts);
      $js_weight++;
    }
  }

  if ($googleonly) {
    return;
  }

  if (!stristr($current_css, GETLOCATIONS_PATH . '/getlocations.css')) {
    drupal_add_css(GETLOCATIONS_PATH . '/getlocations.css');
  }

  if (!stristr($current_js, GETLOCATIONS_PATH . '/js/icons.js')) {
    $js_opts = array();
    $js_opts['weight'] = $js_weight;
    $js_opts['type'] = 'file';
    drupal_add_js(GETLOCATIONS_PATH . '/js/icons.js', $js_opts);
    $js_weight++;
  }

  $markerfile = getlocations_get_markerfile();
  if ($markerfile && !stristr($current_js, $markerfile)) {
    $js_opts = array();
    $js_opts['weight'] = $js_weight;
    $js_opts['type'] = 'file';
    drupal_add_js($markerfile, $js_opts);
    $js_weight++;
  }

  $getlocations_paths = getlocations_paths_get();

  if ($defaults['markermanagertype'] == 1 && !stristr($current_js, $getlocations_paths['markermanager_path'])) {
    $js_opts = array();
    $js_opts['weight'] = $js_weight;
    $js_opts['type'] = 'file';
    drupal_add_js($getlocations_paths['markermanager_path'], $js_opts);
    $js_weight++;
  }
  elseif ($defaults['markermanagertype'] == 2 && !stristr($current_js, $getlocations_paths['markerclusterer_path'])) {
    $js_opts = array();
    $js_opts['weight'] = $js_weight;
    $js_opts['type'] = 'file';
    drupal_add_js($getlocations_paths['markerclusterer_path'], $js_opts);
    $js_weight++;
  }

  if ($defaults['markeraction'] == 2 && !stristr($current_js, $getlocations_paths['infobubble_path'])) {
    $js_opts = array();
    $js_opts['weight'] = $js_weight;
    $js_opts['type'] = 'file';

    drupal_add_js($getlocations_paths['infobubble_path'], $js_opts);
    $js_weight++;
    if (file_exists($getlocations_paths['infobubble_options_path'])) {
      $js_opts = array();
      $js_opts['weight'] = $js_weight;
      $js_opts['type'] = 'file';
      drupal_add_js($getlocations_paths['infobubble_options_path'], $js_opts);
      $js_weight++;
    }
  }
  elseif ($defaults['markeraction'] == 1 && file_exists($getlocations_paths['infowindow_options_path']) && !stristr($current_js, $getlocations_paths['infowindow_options_path'])) {
    $js_opts = array();
    $js_opts['weight'] = $js_weight;
    $js_opts['type'] = 'file';
    drupal_add_js($getlocations_paths['infowindow_options_path'], $js_opts);
    $js_weight++;
  }

  if (!stristr($current_js, $getlocations_paths['getlocations_path'])) {
    $js_opts = array();
    $js_opts['weight'] = $js_weight;
    $js_opts['type'] = 'file';
    drupal_add_js($getlocations_paths['getlocations_path'], $js_opts);
    $js_weight++;
  }
}

/**
 * Some defaults.
 *
 * @return
 *   Returns the current settings
 */
function getlocations_defaults() {
  $defaults = array(
    'api_version'               => 3,
    'width'                     => '300px',
    'height'                    => '200px',
    'zoom'                      => 3,
    'controltype'               => 'small',
    'pancontrol'                => 1,
    'latlong'                   => '40,0',
    'maptype'                   => 'Map',
    'mtc'                       => 'standard',
    'baselayers' => array(
      'Map'                     => 1,
      'Satellite'               => 1,
      'Hybrid'                  => 1,
      'Physical'                => 1,
    ),
    'behavior' => array(
      'scale'                   => 0,
      'overview'                => 0,
      'overview_opened'         => 0,
      'scrollwheel'             => 0,
    ),
    'streetview_show'           => 0,
    'trafficinfo'               => 0,
    'trafficinfo_state'         => 0,
    'bicycleinfo'               => 0,
    'bicycleinfo_state'         => 0,
    'transitinfo'               => 0,
    'transitinfo_state'         => 0,
    'panoramio_use'             => 0,
    'panoramio_show'            => 0,
    'panoramio_state'           => 0,
    'places'                    => 0,
    'poi_show'                  => 1,
    'transit_show'              => 1,
    'node_map_marker'           => 'drupal',
    'user_map_marker'           => 'drupal',
    'vocabulary_map_marker'     => 'drupal',
    'term_map_marker'           => 'drupal',
    'comment_map_marker'        => 'drupal',
    'input_map_marker'          => 'drupal',
    'markeraction'              => 0,
    'markeractiontype'          => 1,
    'minzoom'                   => 6,
    'maxzoom'                   => 16,
    'nodezoom'                  => 12,
    'markermanagertype'         => 0,
    'usemarkermanager'          => 0,
    'useclustermanager'         => 0,
    'markerclusterer_style'     => -1,
    'markerclusterer_zoom'      => -1,
    'markerclusterer_size'      => -1,
    'markerclusterer_minsize'   => -1,
    'markerclusterer_title'     => t('Click here to see more'),
    'pansetting'                => 2,
    'draggable'                 => 1,
    'styles'                    => '',
    'returnlink_page_enable'    => 0,
    'returnlink_page_link'      => t('Return to Page'),
    'returnlink_user_enable'    => 0,
    'returnlink_user_link'      => t('Return to User'),
    'returnlink_term_enable'    => 0,
    'returnlink_term_link'      => t('Return to Term'),
    'returnlink_comment_enable' => 0,
    'returnlink_comment_link'   => t('Return to Comment'),
    'getlocations_js_weight'    => 0,
    'custom_content_enable'     => 0,
    'custom_content_source'     => '',
    'use_jsapi'                 => 0,
    'preload_data'              => 0,
    'is_mobile'                 => (getlocations_is_mobile() ? 1 : 0),
    'geometry'                  => 0,
    'weather_use'               => 0,
    'weather_show'              => 0,
    'weather_state'             => 0,
    'weather_temp'              => 1,
    'weather_speed'             => 1,
    'weather_label'             => 0,
    'weather_cloud'             => 1,
    'weather_cloud_state'       => 0,
    'weather_clickable'         => 1,
    'weather_info'              => 1,
    'map_backgroundcolor'       => '',
  );

  $getlocations_defaults = variable_get('getlocations_default', $defaults);
  $newdefaults = getlocations_adjust_vars($defaults, $getlocations_defaults);
  return $newdefaults;
}

/**
 * Function to check if the configuration has been done yet
 *
 * @return
 *   Returns true or false
 */
function getlocations_defaults_check() {
  $check = variable_get('getlocations_default', 'xxx');
  if ($check == 'xxx') {
    return FALSE;
  }
  return TRUE;
}

/**
 * Function to check a lat,lon string
 *
 * @param string $latlon
 *
 * @return
 *   Returns true or false
 */
function getlocations_latlon_check($latlon) {
  if (! empty($latlon) && preg_match("/[0-9.\-],[0-9.\-]/", $latlon)) {
    $ll = explode(',', $latlon);
    if (! ($ll[0] == 0 && $ll[1] == 0) && isset($ll[0]) && is_numeric($ll[0]) && isset($ll[1]) && is_numeric($ll[1])) {
      return $latlon;
    }
  }
  return FALSE;
}

/**
 * Function to get the vid from node table.
 *
 * @param int $nid
 *
 * @return
 *   Returns vid.
 */
function getlocations_get_vid($nid) {
  if (is_numeric($nid) && $nid ) {
    $query = db_select('node', 'n')->fields('n', array('vid'))->condition('n.nid', $nid);
    $row = $query->execute()->fetchAssoc();
    return (isset($row['vid']) && $row['vid'] ? $row['vid'] : FALSE);
  }
  return FALSE;
}

function getlocations_get_nid($vid) {
  if (is_numeric($vid) && $vid ) {
    $query = db_select('node', 'n')->fields('n', array('nid'))->condition('n.vid', $vid);
    $row = $query->execute()->fetchAssoc();
    return (isset($row['nid']) && $row['nid'] ? $row['nid'] : FALSE);
  }
  return FALSE;
}

function getlocations_get_nid_from_lid($lid) {
  if (is_numeric($lid) && $lid) {
    $query = FALSE;
    if (module_exists('getlocations_fields')) {
      $query = db_select('getlocations_fields_entities', 'i')->fields('i', array('nid'))->condition('i.glid', $lid);
    }
    elseif (module_exists('location') && (module_exists('location_cck') || module_exists('location_node'))) {
      $query = db_select('location_instance', 'i')->fields('i', array('nid'))->condition('i.lid', $lid);
    }
    if ($query) {
      $row = $query->execute()->fetchAssoc();
      return (isset($row['nid']) && $row['nid'] ? $row['nid'] : FALSE);
    }
  }
  return FALSE;
}

function getlocations_get_uid_from_lid($lid) {
  if (is_numeric($lid) && $lid) {
    $query = FALSE;
    if (module_exists('getlocations_fields')) {
      $query = db_select('getlocations_fields_entities', 'i')->fields('i', array('uid'))->condition('i.glid', $lid);
    }
    elseif (module_exists('location') && module_exists('location_user')) {
      $query = db_select('location_instance', 'i')->fields('i', array('uid'))->condition('i.lid', $lid);
    }
    if ($query) {
      $row = $query->execute()->fetchAssoc();
      return (isset($row['uid']) && $row['uid'] ? $row['uid'] : FALSE);
    }
  }
  return FALSE;
}

function getlocations_get_tid_from_lid($lid) {
  if (is_numeric($lid) && $lid) {
    $query = FALSE;
    if (module_exists('getlocations_fields')) {
      $query = db_select('getlocations_fields_entities', 'i')->fields('i', array('tid'))->condition('i.glid', $lid);
    }
    if ($query) {
      $row = $query->execute()->fetchAssoc();
      return (isset($row['tid']) && $row['tid'] ? $row['tid'] : FALSE);
    }
  }
  return FALSE;
}

function getlocations_get_cid_from_lid($lid) {
  if (is_numeric($lid) && $lid) {
    $query = FALSE;
    if (module_exists('getlocations_fields')) {
      $query = db_select('getlocations_fields_entities', 'i')->fields('i', array('cid'))->condition('i.glid', $lid);
    }
    if ($query) {
      $row = $query->execute()->fetchAssoc();
      return (isset($row['cid']) && $row['cid'] ? $row['cid'] : FALSE);
    }
  }
  return FALSE;
}

function getlocations_get_type_from_lid($lid) {
  if (is_numeric($lid) && $lid) {
    $query = FALSE;
    if (module_exists('getlocations_fields')) {
      $query = db_select('getlocations_fields_entities', 'i')->fields('i', array('nid', 'uid', 'tid', 'cid'))->condition('i.glid', $lid);
    }
    elseif (module_exists('location') && (module_exists('location_cck') || module_exists('location_node') || module_exists('location_user'))) {
      $query = db_select('location_instance', 'i')->fields('i', array('nid', 'uid'))->condition('i.lid', $lid);
    }
    if ($query) {
      $row = $query->execute()->fetchAssoc();
      $type = '';
      if (isset($row['nid']) && $row['nid'] > 0) {
        $type = 'node';
      }
      elseif (isset($row['uid']) && $row['uid'] > 0) {
        $type = 'user';
      }
      elseif (isset($row['tid']) && $row['tid'] > 0 && module_exists('taxonomy')) {
        $type = 'vocabulary';
      }
      elseif (isset($row['cid']) && $row['cid'] > 0 && module_exists('comment')) {
        $type = 'comment';
      }
      return $type;
    }
  }
  return FALSE;
}

function getlocations_get_path_from_lid($lid) {
  if (is_numeric($lid) && $lid) {
    $query = FALSE;
    if (module_exists('getlocations_fields')) {
      $query = db_select('getlocations_fields_entities', 'i')->fields('i', array('nid', 'uid', 'tid', 'cid'))->condition('i.glid', $lid);
    }
    elseif (module_exists('location') && (module_exists('location_cck') || module_exists('location_node') || module_exists('location_user'))) {
      $query = db_select('location_instance', 'i')->fields('i', array('nid', 'uid'))->condition('i.lid', $lid);
    }
    if ($query) {
      $row = $query->execute()->fetchAssoc();
      $path = '';
      if (isset($row['nid']) && $row['nid'] > 0) {
        $path = url('node/' . $row['nid']);
      }
      elseif (isset($row['uid']) && $row['uid'] > 0) {
        $path = url('user/' . $row['uid']);
      }
      elseif (isset($row['tid']) && $row['tid'] > 0 && module_exists('taxonomy')) {
        $path = url('taxonomy/term/' . $row['tid']);
      }
      elseif (isset($row['cid']) && $row['cid'] > 0 && module_exists('comment')) {
        $path = url('comment/' . $row['cid']);
      }
      return $path;
    }
  }
  return FALSE;
}

// ajax callback to fill infobubble
function getlocations_info() {

  $lid = $_GET['lid'];
  $lidkey = $_GET['key'];
  $extra = (isset($_GET['sdist']) ? array('sdist' => $_GET['sdist']) : '');
  $content = getlocations_getinfo($lid, $lidkey, $extra);
  drupal_json_output(array('content' => $content));

}

/**
 * @param int $lid location id
 * @param string entity id
 * @return string formatted address
 */
function getlocations_getinfo($lid, $lidkey, $extra=FALSE) {

  $content = FALSE;
  if ($lid > 0) {
    if (module_exists('getlocations_fields') || module_exists('location')) {
      $location = getlocations_load_location($lid);
      $location['nid'] = 0;
      $location['uid'] = 0;
      $location['tid'] = 0;
      $location['cid'] = 0;

      $type = getlocations_get_type_from_lid($lid);
      if ($type == 'node') {
        if ($nid = getlocations_get_nid_from_lid($lid)) {
          $location['nid'] = $nid;
        }
      }
      elseif ($type == 'user') {
        if ($uid = getlocations_get_uid_from_lid($lid)) {
          $location['uid'] = $uid;
        }
      }
      elseif ($type == 'vocabulary' && module_exists('taxonomy')) {
        if ($tid = getlocations_get_tid_from_lid($lid)) {
          $location['tid'] = $tid;
        }
      }
      elseif ($type == 'comment' && module_exists('comment')) {
        if ($cid = getlocations_get_cid_from_lid($lid)) {
          $location['cid'] = $cid;
        }
      }
    }
    elseif (module_exists('geofield') || module_exists('geolocation')) {
      $locations = getlocations_load_locations($lid, $lidkey);
      $location = $locations[0];
    }

    if ($extra) {
      if (is_array($extra) && isset($extra['sdist'])) {
        $sdist = $extra['sdist'];
        $arr = explode('|', $sdist);
        $sunit = $arr[0];
        $slat = $arr[1];
        $slon = $arr[2];
        $lat = $location['latitude'];
        $lon = $location['longitude'];
        $latlon_a = array('lat' => $slat, 'lon' => $slon);
        $latlon_b = array('lat' => $lat, 'lon' => $lon);
        $dist = getlocations_distance_between($latlon_a, $latlon_b, $sunit);
        $location['sdist'] = $dist['scalar'];
        $location['sunit'] = $dist['distance_unit'];
      }
    }

    $content = theme('getlocations_info', array('location' => $location));
  }
  return $content;

}

// ajax callback to provide a link
function getlocations_lidinfo() {

  $lid = $_GET['lid'];
  $lidkey = $_GET['key'];
  $content = getlocations_getlidinfo($lid, $lidkey);
  drupal_json_output(array('content' => $content));

}
/**
 * @param int $lid location id
 * @param string entity id
 * @return string path
 */
function getlocations_getlidinfo($lid, $lidkey) {

  $content = FALSE;
  if ($lid > 0) {
    if (module_exists('getlocations_fields') || module_exists('location')) {
      $path = getlocations_get_path_from_lid($lid);
      if ($path) {
        $content = $path;
      }
    }
    elseif (module_exists('geofield') || module_exists('geolocation') ) {
      if ($lidkey == 'nid') {
        $path = url('node/' . $lid);
      }
      elseif ($lidkey == 'vid') {
        $nid = getlocations_get_nid($lid);
        $path = url('node/' . $nid);
      }
      elseif ($lidkey == 'uid') {
        $path = url('user/' . $lid);
      }
      elseif ($lidkey == 'tid' && module_exists('taxonomy')) {
        $path = url('taxonomy/term/' . $lid);
      }
      elseif ($lidkey == 'cid' && module_exists('comment')) {
        $path = url('comment/' . $lid);
      }
      if ($path) {
        $content = $path;
      }
    }
  }
  return $content;

}

// provides data for marker colorbox
function getlocations_markerinfo() {
  $linktype = $_GET['lt'];
  $cat =  $_GET['cat'];
  $content = "";
  $icons =   getlocations_get_icondata();
  $data = array();
  $files = array();
  $machine_names = array();
  $display_names = array();
  $positions = array();
  $iconct = 0;
  foreach (array_keys($icons) AS $path) {
    if (preg_match("~^/.*/$~", $path)) {
      continue;
    }
    $files = $icons[$path]['f'];
    $machine_names = $icons[$path]['i'][0][0][0];
    $display_names = $icons[$path]['i'][0][0][1];
    $positions     = $icons[$path]['i'][0][0][2];
    $newpositions = array();
    foreach ($positions AS $pos) {
      if (isset($pos[0])) {
        $newpositions[] = $pos[0];
      }
    }
    $adj = 0;
    foreach ($newpositions AS $pos) {
      // no shadow
      if ($pos < 1) {
        $adj = 1;
      }
      $data[$iconct]['path'] = $path . $files[$pos];
      $data[$iconct]['machine_name'] = $machine_names[$pos + $adj];
      $data[$iconct]['display_name'] = $display_names[$pos + $adj];
      $iconct++;
    }
  }
  $content['data'] = $data;
  $content['linktype'] = $linktype;
  $content['cat'] = $cat;
  $output = theme('getlocations_marker_box', array('content' => $content));
  print $output;
  exit;
}

/**
 * Get the list of marker titles.
 * adapted from gmap
 */
function getlocations_get_marker_titles($reset = FALSE) {
  static $titles;

  if (!$reset) {
    if (is_array($titles)) {
      return $titles;
    }

    $cached = cache_get('getlocations_marker_titles', 'cache');
    if (!empty($cached)) {
      $titles = $cached->data;
      if (is_array($titles)) {
        return $titles;
      }
    }
  }

  module_load_include('inc', 'getlocations', 'getlocations.markerinfo');
  $titles = _getlocations_get_marker_titles();
  cache_set('getlocations_marker_titles', $titles, 'cache');
  return $titles;
}

/**
 * Get the JSON icon data for all the default markers.
 */
function getlocations_get_icondata($reset = FALSE) {
  static $icons;
  if (is_array($icons) && !$reset) {
    return $icons;
  }

  $icons = cache_get('getlocations_icondata');
  if ($icons) {
    $icons = $icons->data;
  }

  if ($reset || !$icons) {
    module_load_include('inc', 'getlocations', 'getlocations.markerinfo');
    $icons = _getlocations_get_icondata();
  }
  cache_set('getlocations_icondata', $icons, 'cache');
  return $icons;
}

/**
 * Regenerate the markerdata file.
 */
function getlocations_regenerate_markers() {
  $contents = '';

  $contents .= "// Getlocations marker image data.\n";
  $contents .= "Drupal.getlocations.iconpath = " . drupal_json_encode(base_path()) . ";\n";
  $contents .= "Drupal.getlocations.icondata = " . drupal_json_encode(getlocations_get_icondata(TRUE)) . ";\n";

  // Create the js/ within the files folder.
  $jspath = getlocations_get_markerfile(TRUE, FALSE);
  $jsfile = getlocations_get_markerfile(FALSE, FALSE);
  if ($jspath && $jsfile && file_prepare_directory($jspath, FILE_CREATE_DIRECTORY) && file_unmanaged_save_data($contents, $jsfile, FILE_EXISTS_REPLACE)) {
    // Also regenerate the cached marker titles array
    getlocations_get_marker_titles(TRUE);
  }
  else {
    // failed
    drupal_set_message(t('Getlocations is unable to save the marker configuration, so the markers will not work. Please check file system permissions of %filepath!', array('%filepath' => $jsfile)), 'error');
    watchdog('getlocations', 'Getlocations write error when saving the marker configuration to %filepath.', array('%filepath' => $jsfile), WATCHDOG_ERROR);
  }
}

function getlocations_get_markerfile($dir=FALSE, $check=TRUE) {

  if (file_default_scheme() != 'public') {
    // private
    $markerpath = '';
    $markerfile = variable_get('getlocations_private_markerfile', '');
    if ($markerfile && preg_match("~^(.*)/getlocations_markers.js~", $markerfile, $matches)) {
      $markerpath = $matches[1];
    }
  }
  else {
    $markerpath = file_stream_wrapper_get_instance_by_scheme(file_default_scheme())->getDirectoryPath() . '/getlocations';
    $markerfile = '';
    if ($markerpath) {
      $markerfile = $markerpath . '/getlocations_markers.js';
    }
  }
  if ($dir && $markerpath) {
    if ($check) {
      if (file_exists($markerpath)) {
        return $markerpath;
      }
    }
    else {
      return $markerpath;
    }
  }
  elseif ($markerfile) {
    if ($check) {
      if (file_exists($markerfile)) {
        return $markerfile;
      }
    }
    else {
      return $markerfile;
    }
  }
  return FALSE;
}

/**
 * hook_getlocations_markerdir
 * from jhm http://drupal.org/user/15946
 */
function getlocations_getlocations_markerdir() {
  $markerdir = libraries_get_path('getlocations') . '/markers';
  return $markerdir;
}

/**
 * @param int $ct $location $minmaxes
 *
 * @return
 *   Returns $minmaxes
 *
 */
function getlocations_do_minmaxes($ct, $location, $minmaxes) {
  if ($ct) {
    // latitudes
    if ($location['latitude'] > $minmaxes['maxlat']) {
      $minmaxes['maxlat'] = $location['latitude'];
    }
    if ($location['latitude'] < $minmaxes['minlat']) {
      $minmaxes['minlat'] = $location['latitude'];
    }
    // longitudes
    if ($location['longitude'] > $minmaxes['maxlon']) {
      $minmaxes['maxlon'] = $location['longitude'];
    }
    if ($location['longitude'] < $minmaxes['minlon']) {
      $minmaxes['minlon'] = $location['longitude'];
    }
  }
  else {
    $minmaxes['minlat'] = $location['latitude'];
    $minmaxes['maxlat'] = $location['latitude'];
    $minmaxes['minlon'] = $location['longitude'];
    $minmaxes['maxlon'] = $location['longitude'];
  }
  return $minmaxes;
}


// for colorbox and suchlike
function getlocations_box() {

  $a1 = FALSE;
  $a2 = FALSE;
  $a3 = FALSE;
  $a4 = FALSE;

  if (arg(1)) {
    $a1 = arg(1);
  }
  if (arg(2)) {
    $a2 = arg(2);
  }
  if (arg(3)) {
    $a3 = arg(3);
  }
  if (arg(4)) {
    $a4 = arg(4);
  }

  $content = '';

  // $a1 can be node, user, users, type, lids, nids
  if ($a1 == 'node' && $a2) {
    $content .= getlocations_nodemap($a2);
  }
  elseif ($a1 == 'user' && $a2) {
    $content .= getlocations_usermap($a2);
  }

  elseif ($a1 == 'term' && $a2) {
    $content .= getlocations_termmap($a2);
  }
  elseif ($a1 == 'comment' && $a2) {
    $content .= getlocations_commentmap($a2);
  }
  elseif ($a1 == 'users') {
    $content .= getlocations_usersmap();
  }
  elseif ($a1 == 'type' && $a2) {
    $content .= getlocations_typemap($a2, $a3, $a4);
  }
  elseif ($a1 == 'lids' && $a2) {
    $content .= getlocations_lids($a2);
  }
  elseif ($a1 == 'nids' && $a2) {
    $content .= getlocations_nids($a2);
  }

  $output = theme('getlocations_box', array('content' => $content));
  print $output;
  exit;
}

function getlocations_get_types() {
  $options = array();
  foreach (node_type_get_types() as $type => $object) {
    if (getlocations_check_node($type)) {
      $options[$type] = $object->name;
    }
  }
  return $options;
}

function getlocations_check_node($bundle) {

  $module = getlocations_get_current_supported_module();
  if ($module) {
    $query = db_select('field_config', 'f');
    $query->fields('f', array('id'));
    $query->join('field_config_instance', 'i', 'f.id=i.field_id');
    $query->condition('i.bundle', $bundle)
      ->condition('f.module', $module)
      ->condition('i.entity_type', 'node')
      ->condition('f.active', 1);
    $rows = $query->execute();
    $ct = 0;
    foreach ($rows AS $row) {
      $ct++;
    }
    if ($ct) {
      return TRUE;
    }
  }
  return FALSE;
}

function getlocations_get_fieldname($bundle, $entity_type='node') {

  $module = getlocations_get_current_supported_module();
  if ($module) {
    $query = db_select('field_config', 'f');
    $query->fields('f', array('field_name'));
    $query->join('field_config_instance', 'i', 'f.id=i.field_id');
    $query->condition('i.bundle', $bundle)
      ->condition('f.module', $module)
      ->condition('i.entity_type', $entity_type)
      ->condition('f.active', 1);
    $rows = $query->execute();
    $ct = 0;
    foreach ($rows AS $row) {
      $data = $row->field_name;
      $ct++;
    }
    if ($ct) {
      return $data;
    }
  }
  return FALSE;
}

function getlocations_get_fieldname2($bundle, $entity_type='node') {

  $module = getlocations_get_current_supported_module();
  if ($module) {
    $query = db_select('field_config', 'f');
    $query->fields('f', array('field_name'));
    $query->join('field_config_instance', 'i', 'f.id=i.field_id');
    $query->condition('i.bundle', $bundle)
      ->condition('f.module', $module)
      ->condition('i.entity_type', $entity_type)
      ->condition('f.active', 1);
    $rows = $query->execute();
    $ct = 0;
    foreach ($rows AS $row) {
      $data[$ct] = $row->field_name;
      $ct++;
    }
    if ($ct) {
      return $data;
    }
  }
  return FALSE;
}

// is an entity_type location enabled?
function getlocations_check_entity_type($entity_type) {

  $module = getlocations_get_current_supported_module();
  if ($module) {
    $query = db_select('field_config', 'f');
    $query->fields('f', array('id'));
    $query->join('field_config_instance', 'i', 'f.id=i.field_id');
    $query->condition('f.module', $module)
      ->condition('i.entity_type', $entity_type)
      ->condition('f.active', 1);
    $rows = $query->execute();
    $ct = 0;
    foreach ($rows AS $row) {
      $ct++;
    }
    if ($ct) {
      return TRUE;
    }
  }
  return FALSE;
}

function getlocations_get_vocabularies() {
  if (module_exists('taxonomy')) {
    $vocabularies = taxonomy_get_vocabularies();
    $options = array();
    if (count($vocabularies)) {
      foreach ($vocabularies as $vid => $vocabulary) {
        if (getlocations_check_vocabulary($vocabulary->name)) {
          $options[$vid] = $vocabulary->name;
        }
      }
      return $options;
    }
  }
  return FALSE;
}

function getlocations_get_machine_vocabularies() {
  if (module_exists('taxonomy')) {
    $vocabularies = taxonomy_get_vocabularies();
    $options = array();
    if (count($vocabularies)) {
      foreach ($vocabularies as $vid => $vocabulary) {
        if (getlocations_check_vocabulary($vocabulary->name)) {
          $options[$vid] = $vocabulary->machine_name;
        }
      }
      return $options;
    }
  }
  return FALSE;
}


function getlocations_check_vocabulary($vocab_name) {
  if (module_exists('taxonomy')) {
    $module = getlocations_get_current_supported_module();
    if ($module) {
      // first we need to get the machine name of the vocab.
      $query = db_select('taxonomy_vocabulary', 'v');
      $query->fields('v', array('machine_name'));
      $query->condition('v.name', $vocab_name);
      $row = $query->execute()->fetchObject();
      if ($row) {
        $machine_name = $row->machine_name;
        $query = db_select('field_config', 'f');
        $query->fields('f', array('id'));
        $query->join('field_config_instance', 'i', 'f.id=i.field_id');
        $query->condition('i.bundle', $machine_name)
          ->condition('f.module', $module )
          ->condition('i.entity_type', 'taxonomy_term')
          ->condition('f.active', 1);
        $rows = $query->execute();
        $ct = 0;
        foreach ($rows AS $row) {
          $ct++;
        }
        if ($ct) {
          return TRUE;
        }
      }
    }
  }
  return FALSE;
}

function getlocations_get_markertypes($type) {

  $getlocations_defaults = getlocations_defaults();

  $markertypes = array();
  if ($type == 'node') {
    $default_marker = $getlocations_defaults['node_map_marker'];
    $getlocations_node_marker = variable_get('getlocations_node_marker', array('enable' => 0));
    if ($getlocations_node_marker['enable']) {
      if ($content_types = getlocations_get_types()) {
        foreach ($content_types AS $content_type => $name ) {
          $field_names = getlocations_get_fieldname2($content_type, 'node');
          foreach ($field_names AS $field_name) {
            if (isset($getlocations_node_marker['content_type'][$content_type]['field_name'][$field_name]['map_marker'])) {
              $markertypes[$content_type] = $getlocations_node_marker['content_type'][$content_type]['field_name'][$field_name]['map_marker'];
            }
            else {
              $markertypes[$content_type] = $default_marker;
            }
          }
        }
      }
    }
    return $markertypes;
  }
  elseif ($type == 'vocabulary' && module_exists('taxonomy')) {
    $default_marker = $getlocations_defaults['vocabulary_map_marker'];
    $vocabularies = getlocations_get_vocabularies();
    $getlocations_vocabulary_marker = variable_get('getlocations_vocabulary_marker', array('enable' => 0));
    foreach ($vocabularies AS $vid => $vocabulary) {
      if ($getlocations_vocabulary_marker['enable'] && isset($getlocations_vocabulary_marker['vocabulary'][$vid]['map_marker'])) {
        $markertypes[$vid] = $getlocations_vocabulary_marker['vocabulary'][$vid]['map_marker'];
      }
      else {
        $markertypes[$vid] = $default_marker;
      }
    }
    return $markertypes;
  }
  elseif ($type == 'term' && module_exists('taxonomy')) {
    $default_marker = $getlocations_defaults['term_map_marker'];
    $getlocations_term_marker = variable_get('getlocations_term_marker', array('enable' => 0, 'vids' => 0, 'max_depth' => ''));
    if ($getlocations_term_marker['enable'] && $getlocations_term_marker['vids'] ) {
      $depth = is_numeric($getlocations_term_marker['max_depth']) && $getlocations_term_marker['max_depth'] > 0 ? $getlocations_term_marker['max_depth'] : NULL;
      $vids = $getlocations_term_marker['vids'];
      foreach ($vids AS $vid) {
        $terms = taxonomy_get_tree($vid, 0, $depth);
        foreach ($terms AS $term) {
          if (isset($getlocations_term_marker['vid'][$vid]['term'][$term->tid]['map_marker'])) {
            $markertypes[$content_type] = $getlocations_term_marker['vid'][$vid]['term'][$term->tid]['map_marker'];
          }
          else {
            $markertypes[$content_type] = $default_marker;
          }
        }
      }
    }
    return $markertypes;
  }
  else {
    return FALSE;
  }
}

function getlocations_get_nodetype($nid) {
  $query = db_select('node', 'n')->fields('n', array('type'))->condition('n.nid', $nid);
  $row = $query->execute()->fetchAssoc();
  return (isset($row['type']) && $row['type'] ? $row['type'] : FALSE);
}

function getlocations_js_settings_do($defaults, $latlons, $minmaxes, $mapid, $inputmap = FALSE, $searchmap = FALSE) {
  global $language;
  $lla = explode(',', $defaults['latlong']);
  $lat = $lla[0];
  $lng = $lla[1];
  $settings = array(
    $mapid => array(
      'lat'                     => trim($lat),
      'lng'                     => trim($lng),
      'mylocale'                => $language->language,
      'zoom'                    => $defaults['zoom'],
      'maptype'                 => $defaults['maptype'],
      'controltype'             => $defaults['controltype'],
      'mtc'                     => $defaults['mtc'],
      'baselayers'              => $defaults['baselayers'],
      'scale'                   => $defaults['behavior']['scale'],
      'overview'                => $defaults['behavior']['overview'],
      'overview_opened'         => $defaults['behavior']['overview_opened'],
      'scrollwheel'             => $defaults['behavior']['scrollwheel'],
      'trafficinfo'             => $defaults['trafficinfo'],
      'trafficinfo_state'       => $defaults['trafficinfo_state'],
      'bicycleinfo'             => $defaults['bicycleinfo'],
      'bicycleinfo_state'       => $defaults['bicycleinfo_state'],
      'transitinfo'             => $defaults['transitinfo'],
      'transitinfo_state'       => $defaults['transitinfo_state'],
      'streetview_show'         => $defaults['streetview_show'],
      'pancontrol'              => $defaults['pancontrol'],
      'panoramio_use'           => $defaults['panoramio_use'],
      'panoramio_show'          => $defaults['panoramio_show'],
      'panoramio_state'         => $defaults['panoramio_state'],
      'poi_show'                => $defaults['poi_show'],
      'transit_show'            => $defaults['transit_show'],
      'map_marker'              => $defaults['node_map_marker'],
      'markeraction'            => $defaults['markeraction'],
      'markeractiontype'        => $defaults['markeractiontype'],
      'minzoom'                 => $defaults['minzoom'],
      'maxzoom'                 => $defaults['maxzoom'],
      'nodezoom'                => $defaults['nodezoom'],
      'markermanagertype'       => $defaults['markermanagertype'],
      'usemarkermanager'        => $defaults['usemarkermanager'],
      'useclustermanager'       => $defaults['useclustermanager'],
      'markerclusterer_style'   => $defaults['markerclusterer_style'],
      'markerclusterer_zoom'    => $defaults['markerclusterer_zoom'],
      'markerclusterer_size'    => $defaults['markerclusterer_size'],
      'markerclusterer_minsize' => $defaults['markerclusterer_minsize'],
      'markerclusterer_title'   => $defaults['markerclusterer_title'],
      'pansetting'              => $defaults['pansetting'],
      'draggable'               => $defaults['draggable'],
      'styles'                  => $defaults['styles'],
      'datanum'                 => count($latlons),
      'latlons'                 => $latlons,
      'minmaxes'                => (empty($minmaxes) ? '' : implode(',', $minmaxes)),
      'inputmap'                => ($inputmap ? 1 : 0),
      'searchmap'               => ($searchmap ? 1 : 0),
      'custom_content_enable'   => $defaults['custom_content_enable'],
      'preload_data'            => $defaults['preload_data'],
      'is_mobile'               => (getlocations_is_mobile() ? 1 : 0),
      'weather_use'             => $defaults['weather_use'],
      'map_backgroundcolor'     => $defaults['map_backgroundcolor'],
    ),
  );
  if ($defaults['weather_use']) {
    $settings[$mapid]['weather_show'] = $defaults['weather_show'];
    $settings[$mapid]['weather_state'] = $defaults['weather_state'];
    $settings[$mapid]['weather_temp'] = $defaults['weather_temp'];
    $settings[$mapid]['weather_speed'] = $defaults['weather_speed'];
    $settings[$mapid]['weather_label'] = $defaults['weather_label'];
    $settings[$mapid]['weather_cloud'] = $defaults['weather_cloud'];
    $settings[$mapid]['weather_cloud_state'] = $defaults['weather_cloud_state'];
    $settings[$mapid]['weather_clickable'] = $defaults['weather_clickable'];
    $settings[$mapid]['weather_info'] = $defaults['weather_info'];
  }
  drupal_add_js(array('getlocations' => $settings), 'setting');

  if ($defaults['preload_data']) {
    $info = array();
    if (count($latlons)) {
      $ct = 0;
      foreach ($latlons AS $latlon) {
        $info[$ct]['lid'] = 0;
        $info[$ct]['lidkey'] = '';
        $info[$ct]['content'] = '';
        if (isset($latlon[2]) && isset($latlon[5])) {
          $info[$ct]['lid'] = $latlon[2];
          $info[$ct]['lidkey'] = $latlon[5];
          $info[$ct]['content'] = '';
          if ($defaults['markeraction'] == 1 || $defaults['markeraction'] == 2) {
            $info[$ct]['content'] = getlocations_getinfo($latlon[2], $latlon[5]);
          }
          elseif ($defaults['markeraction'] == 3) {
            $info[$ct]['content'] = getlocations_getlidinfo($latlon[2], $latlon[5]);
          }
        }
        $ct++;
      }
    }
    $info_settings = array(
      $mapid => $info,
    );
    drupal_add_js(array('getlocations_info' => $info_settings), 'setting');
  }

}

function getlocations_load_locations($id, $key = 'vid') {
  $locations = '';
  if (module_exists('getlocations_fields')) {
    $locations = getlocations_fields_load_locations($id, $key);
  }
  elseif (module_exists('location_cck')) {
    $locations = location_load_locations($id, $key);
  }
  elseif (module_exists('geofield')) {
    $locations = getlocations_other_load_locations($id, $key, 'geofield');
  }
  elseif (module_exists('geolocation')) {
    $locations = getlocations_other_load_locations($id, $key, 'geolocation');
  }
  return $locations;
}

function getlocations_load_location($lid) {

  $getlocations_defaults = getlocations_defaults();
  $location = '';
  if (module_exists('getlocations_fields')) {
    $location = getlocations_fields_load_location($lid);
    $type = getlocations_get_type_from_lid($lid);
    if (! isset($location['marker']) || empty($location['marker'])) {
      $location['marker'] = $getlocations_defaults[$type . '_map_marker'];
    }
  }
  elseif (module_exists('location_cck')) {
    $location = location_load_location($lid);
    $location['marker'] = $getlocations_defaults['node_map_marker'];
  }
  return $location;
}

function getlocations_other_load_locations($id, $key = 'vid', $module = '') {
  global $language;

  $locations = array();
  if (empty($module)) {
    return $locations;
  }

  if ($key == 'nid') {
    $entity_type = 'node';
    $obj = node_load($id);
    $location_name = $obj->title;
  }
  elseif ($key == 'vid') {
    $entity_type = 'node';
    $obj = node_load(NULL, $id);
    $location_name = $obj->title;
  }
  elseif ($key == 'uid') {
    $entity_type = 'user';
    $obj = user_load($id);
    $location_name = $obj->name;
  }
  elseif ($key == 'tid') {
    $entity_type = 'taxonomy_term';
    $obj = taxonomy_term_load($id);
    $location_name = $obj->name;
  }
  elseif ($key == 'cid') {
    $entity_type = 'comment';
    $obj = comment_load($id);
    $location_name = $obj->subject;
  }
  // get the field_xxx names
  $objfields = array();
  foreach ($obj AS $k => $therest) {
    if (preg_match("/^field_/", $k)) {
      $objfields[] = $k;
    }
  }
  if (empty($objfields)) {
    return $locations;
  }

  // find a geofield
  if ($module == 'geofield') {
    $type = 'geofield';
    $geofields = getlocations_other_get_fieldname($type, $module, $entity_type);
    if (! empty($geofields)) {
      $geofield = '';
      foreach ($objfields AS $field) {
        if (in_array($field, $geofields)) {
          $geofield = $field;
        }
      }
      if ( empty($geofield)) {
        return $locations;
      }
    }
    // got one
    $geo = $obj->$geofield;
    $geo_keys = array_keys($geo);
    foreach ($geo_keys AS $lang) {
      if ($lang == $language->language || (isset($obj->language) && $lang == $obj->language) || $lang == 'und') {
        $ct = 0;
        foreach ($geo[$lang] AS $g) {
          $locations[$ct]['latitude']  = $g['lat'];
          $locations[$ct]['longitude'] = $g['lon'];
          $locations[$ct][$key] = $id;
          if ($key == 'vid') {
            $locations[$ct]['nid'] = getlocations_get_nid($id);
          }
          $locations[$ct]['key'] = $key;
          $ct++;
        }
      }
    }


  }
  elseif ($module == 'geolocation') {
    $type = 'geolocation_latlng';
    $geolocationfields = getlocations_other_get_fieldname($type, $module, $entity_type);
    if (! empty($geolocationfields)) {
      $geolocationfield = '';
      foreach ($objfields AS $field) {
        // test for geolocationfields
        if (in_array($field, $geolocationfields)) {
          $geolocationfield = $field;
        }
      }
      if (empty($geolocationfield)) {
        return $locations;
      }
      // got one
      $geo = $obj->$geolocationfield;
      $geo_keys = array_keys($geo);
      foreach ($geo_keys AS $lang) {
        if ($lang == $language->language || (isset($obj->language) && $lang == $obj->language) || $lang == 'und') {
          $ct = 0;
          foreach ($geo[$lang] AS $g) {
            $locations[$ct]['latitude']  = $g['lat'];
            $locations[$ct]['longitude'] = $g['lng'];
            $locations[$ct][$key] = $id;
            if ($key == 'vid') {
              $locations[$ct]['nid'] = getlocations_get_nid($id);
            }
            $locations[$ct]['key'] = $key;
            $locations[$ct]['name'] = $location_name;
            $ct++;
          }
        }
      }
    }
  }

  // addressfield
  if (module_exists('addressfield')) {
    // find an addressfield
    $type = 'addressfield';
    $addressfields = getlocations_other_get_fieldname($type, 'addressfield', $entity_type);
    if (! empty($addressfields)) {
      foreach ($objfields AS $field) {
        if (in_array($field, $addressfields)) {
          $addressfield = $field;
        }
      }
      if (empty($addressfield)) {
        return $locations;
      }
      // got one
      $addr = $obj->$addressfield;
      $addr_keys = array_keys($addr);
      foreach ($addr_keys AS $lang) {
        if ($lang == $language->language || (isset($obj->language) && $lang == $obj->language) || $lang == 'und') {
          $ct = 0;
          foreach ($addr[$lang] AS $a) {
            $locations[$ct]['name'] = $a['organisation_name'];
            $locations[$ct]['street'] = $a['thoroughfare'];
            $additional = array();
            if ($a['premise']) {
              $additional[] = $a['premise'];
            }
            if ($a['sub_premise']) {
              $additional[] = $a['sub_premise'];
            }
            $locations[$ct]['additional'] = (count($additional) ? implode(", ", $additional) : '');
            $city = array();
            if ($a['dependent_locality']) {
              $city[] = $a['dependent_locality'];
            }
            if ($a['locality']) {
              $city[] = $a['locality'];
            }
            $locations[$ct]['city'] = (count($city) ? implode(", ", $city) : '');
            $admin_area = array();
            if ($a['sub_administrative_area']) {
              $admin_area[] = $a['sub_administrative_area'];
            }
            if ($a['administrative_area']) {
              $admin_area[] = $a['administrative_area'];
            }
            $locations[$ct]['province_name'] = (count($admin_area) ? implode(", ", $admin_area) :'');
            $locations[$ct]['postal_code'] = drupal_strtoupper($a['postal_code']);
            $locations[$ct]['country_name'] = $a['country_name'];
            $locations[$ct]['country'] = $a['country'];
            $ct++;
          }
        }
      }
    }
  }

  return $locations;
}

function getlocations_other_get_fieldname($type, $module, $entity_type = '') {

  $query = db_select('field_config', 'fc');
  $query->fields('fc', array('field_name'))->distinct();
  $query->join('field_config_instance', 'i', 'fc.id = i.field_id');
  $query->condition('fc.module', $module);
  $query->condition('fc.type', $type);
  $query->condition('fc.active', 1);
  $query->condition('fc.storage_active', 1);
  if (! empty($entity_type)) {
    $query->condition('i.entity_type', $entity_type);
  }
  $rows = $query->execute();
  $field_names = array();
  foreach ($rows AS $row) {
    $field_names[] = $row->field_name;
  }
  return $field_names;

}

/**
 * Some form helper functions
 * for admin and views plugin style
 */
function getlocations_element_map_marker($title, $options, $default, $description='') {

  $element = array(
    '#type' => 'select',
    '#title' => $title,
    '#options' => $options,
    '#default_value' => $default,
  );
  if ($description) {
    $element['#description'] = $description;
  }
  return $element;
}

function getlocations_element_map_tf($title, $default, $description='', $size=60, $maxlength=255, $required=FALSE, $weight='') {

  $element = array(
    '#type' => 'textfield',
    '#title' => $title,
    '#default_value' => $default,
    '#size' => $size,
    '#maxlength' => $maxlength,
  );
  if ($required) {
    $element['#required'] = TRUE;
  }
  if ($description) {
    $element['#description'] = $description;
  }
  if (is_numeric($weight)) {
    $element['#weight'] = $weight;
  }

  return $element;
}

function getlocations_element_map_zoom($title, $default, $description='') {

  $element = array(
    '#type' => 'select',
    '#title' => $title,
    '#default_value' => $default,
    '#options' => drupal_map_assoc(range(0, 20)),
  );
  if (! empty($description)) {
    $element['#description'] = $description;
  }
  return $element;
}

function getlocations_element_map_zoom_controltype($default) {

  $element = array(
    '#type' => 'select',
    '#title' => t('Zoom Control type'),
    '#options' => array(
      'none' => t('None'),
      'default' => t('Default'),
      'small' => t('Small'),
      'large' => t('Large'),
    ),
    '#default_value' => $default,
  );
  return $element;
}

function getlocations_element_map_checkbox($title, $default, $description='') {

  $element = array(
    '#type' => 'checkbox',
    '#title' => $title,
    '#default_value' => $default,
    '#return_value' => 1,
  );
  if (! empty($description)) {
    $element['#description'] = $description;
  }
  return $element;
}

function getlocations_element_map_mtc($default) {

  $element = array(
    '#type' => 'select',
    '#title' => t('Map Control Type'),
    '#options' => array(
      'none' => t('None'),
      'standard' => t('Horizontal bar'),
      'menu' => t('Dropdown'),
    ),
    '#default_value' => $default,
  );
  return $element;
}

function getlocations_element_map_maptype($default, $baselayers) {
  $options = array();
  $layers = array(
    'Map' => t('Standard street map'),
    'Satellite' => t('Standard satellite map'),
    'Hybrid' => t('Hybrid satellite map'),
    'Physical' => t('Terrain map'),
  );
  foreach ($layers AS $key => $layer) {
    if ($baselayers[$key]) {
      $options[$key] = $layer;
    }
  }
  $element = array(
    '#type' => 'select',
    '#title' => t('Default map type'),
    '#options' => $options,
    '#default_value' => $default,
  );
  return $element;
}

function getlocations_element_map_baselayers($view, $default) {
  // Map Satellite Hybrid Physical
  if ($view == 'Map') {
    $title = t('Standard street map');
    $description = t('The standard default street map.');
  }
  elseif ($view == 'Satellite') {
    $title = t('Standard satellite map');
    $description = t('Satellite view without street overlay.');
  }
  elseif ($view == 'Hybrid') {
    $title = t('Hybrid satellite map');
    $description = t('Satellite view with street overlay.');
  }
  elseif ($view == 'Physical') {
    $title = t('Terrain map');
    $description = t('Map with physical data (terrain, vegetation.)');
  }
  if ($title) {
    $element = getlocations_element_map_checkbox($title, $default, $description);
    return $element;
  }
  return FALSE;
}

function getlocations_element_map_pansetting($default) {

  $element = array(
    '#type' => 'select',
    '#title' => t('Automatic Panning'),
    '#default_value' => $default,
    '#options' => array(0 => t('None'), 1 => t('Pan'), 2 => t('Pan and zoom'), 3 => t('Set Center')),
    '#description' => t('"None" is No panning,<br />"Pan" keeps the markers in the Viewport,<br />"Pan and zoom" fits the markers to the Viewport,<br /> "Set Center" places the markers in the middle of the map.'),
  );
  return $element;
}

function getlocations_element_map_markeraction($default) {

  $element = array(
    '#type' => 'select',
    '#title' => t('Marker action'),
    '#default_value' => $default,
    '#options' => array(
      0 => t('None'),
      1 => t('InfoWindow'),
      2 => t('InfoBubble'),
      3 => t('Link')),
    '#description' => t('"None" is No action,<br />"InfoWindow" show information in a Google InfoWindow,<br />"InfoBubble" use InfoBubble instead,<br /> "Link" go to a page.'),
  );
  return $element;
}

function getlocations_element_map_markeractiontype($default) {

  $element = array(
    '#type' => 'select',
    '#title' => t('Marker action type'),
    '#default_value' => $default,
    '#options' => array(
      1 => t('Click'),
      2 => t('Mouse over')),
    '#description' => t('"Click" is clicking on the marker,<br />"Mouse over" is holding the mouse over a marker.'),
  );
  return $element;
}

function getlocations_element_markermanagertype($default) {

  $element = array(
    '#type' => 'select',
    '#title' => t('Marker Manager type'),
    '#default_value' => $default,
    '#options' => array(
      0 => t('None'),
      2 => t('Marker Clusterer'),
      1 => t('Marker Manager'),
    ),
    '#description' => t('The type of marker management software to load, if any.'),
  );
  return $element;
}


function getlocations_element_path($title, $default, $size, $maxlength, $description) {
  $element = getlocations_element_map_tf(
    $title,
    $default,
    $description,
    $size,
    $maxlength,
    TRUE
  );
  return $element;
}

function getlocations_element_map_behavior($type, $default) {
  // scale  overview overview_opened scrollwheel
  if ($type == 'scale') {
    $title = t('Scale');
    $description = t('Show scale');
  }
  elseif ($type == 'overview') {
    $title = t('Overview map');
    $description = t('Show overview map');
  }
  elseif ($type == 'overview_opened') {
    $title = t('Overview map state');
    $description = t('Show overview map as open by default.');
  }
  elseif ($type == 'scrollwheel') {
    $title = t('Scrollwheel');
    $description = t('Enable scrollwheel zooming');
  }
  if ($title) {
    $element = getlocations_element_map_checkbox($title, $default, $description);
    return $element;
  }
  return FALSE;
}

function getlocations_element_map_limits($default, $title = '', $description = '') {

  if (empty($title)) {
    $title = t('Locations to show');
  }
  if (empty($description)) {
    $description = t('The maximum number of locations to show, sorted by distance');
  }
  $element = array(
    '#type' => 'select',
    '#title' => $title,
    '#description' => $description,
    '#options' => array(0 => t('All'), 10 => '10', 20 => '20', 30 => '30', 40 => '40', 50 => '50', 75 => '75',
      100 => '100', 150 => '150', 175 => '175', 200 => '200', 250 => '250', 300 => '300', 400 => '400', 500 => '500',
    ),
    '#default_value' => $default,
  );

  return $element;

}

/**
 * @param string $default
 * @param string $title
 * @param array $options
 * @param string $description
 * @param bool $multiple
 * @param int $weight
 *
 * @return
 *   Returns form element
 *
 */
function getlocations_element_dd($title, $default, $options, $description = '', $multiple = FALSE, $weight = '') {

  $element = array(
    '#type' => 'select',
    '#title' => $title,
    '#default_value' => $default,
    '#options' => $options,
  );
  if ($description) {
    $element['#description'] = $description;
  }
  if ($multiple) {
    $element['#multiple'] = TRUE;
    $element['#size'] = min(12, count($options));
  }
  if (is_numeric($weight)) {
    $element['#weight'] = $weight;
  }
  return $element;
}

function getlocations_map_display_basics_form($defaults, $labels = array()) {
  $label = array(
    'width' => t('Default width'),
    'height' => t('Default height'),
    'styles' => t('Default styles'),
    'latlong' => t('Map center'),
    'zoom' => t('Zoom')
  );
  if (isset($labels['width'])) {
    $label['width'] = $labels['width'];
  }
  if (isset($labels['height'])) {
    $label['height'] = $labels['height'];
  }
  if (isset($labels['styles'])) {
    $label['styles'] = $labels['styles'];
  }
  if (isset($labels['latlong'])) {
    $label['latlong'] = $labels['latlong'];
  }
  if (isset($labels['zoom'])) {
    $label['zoom'] = $labels['zoom'];
  }

  $form = array();
  $form['width'] = getlocations_element_map_tf(
    $label['width'],
    $defaults['width'],
    t('The default width of a Google map, as a CSS length or percentage. Examples: <em>50px</em>, <em>5em</em>, <em>2.5in</em>, <em>95%</em>'),
    10,
    10,
    TRUE
  );

  $form['height'] = getlocations_element_map_tf(
    $label['height'],
    $defaults['height'],
    t('The default height of a Google map, as a CSS length or percentage. Examples: <em>50px</em>, <em>5em</em>, <em>2.5in</em>, <em>95%</em>'),
    10,
    10,
    TRUE
  );

  $form['styles'] = array(
    '#type' => 'textarea',
    '#title' => $label['styles'],
    '#default_value' => $defaults['styles'],
    '#description' => t('The default styles of a Google map. Use !link for generating your styles', array('!link' => l(t('this wizard'), 'http://gmaps-samples-v3.googlecode.com/svn/trunk/styledmaps/wizard/index.html', array('external' => TRUE)))),
  );

  $form['latlong'] = getlocations_element_map_tf(
    $label['latlong'],
    $defaults['latlong'],
    t('The default center coordinates of a Google map, expressed as a decimal latitude and longitude, separated by a comma. This must not be 0,0'),
    30,
    30,
    TRUE
  );

  $form['zoom'] = getlocations_element_map_zoom(
    $label['zoom'],
    $defaults['zoom'],
    t('The default zoom level of a Google map.')
  );
  return $form;
}

function getlocations_map_display_options_form($defaults, $config = TRUE, $extras = TRUE) {
  $form = array();
  $form['controltype'] = getlocations_element_map_zoom_controltype($defaults['controltype']);
  $form['pancontrol'] = getlocations_element_map_checkbox(t('Show Pan control'), $defaults['pancontrol']);
  $form['mtc'] = getlocations_element_map_mtc($defaults['mtc']);

  $form['maptype'] = getlocations_element_map_maptype($defaults['maptype'], $defaults['baselayers']);

  foreach ($defaults['baselayers'] AS $key => $value) {
    $layer = getlocations_element_map_baselayers($key, $value);
    if ($layer) {
      $form['baselayers'][$key] = $layer;
    }
  }

  foreach ($defaults['behavior'] AS $key => $value) {
    $layer = getlocations_element_map_behavior($key, $value);
    if ($layer) {
      $form['behavior'][$key] = $layer;
    }
  }

  $form['draggable'] = getlocations_element_map_checkbox(
    t('Draggable'),
    $defaults['draggable'],
    t('Enable dragging the map.')
  );
  $form['map_backgroundcolor'] = getlocations_element_map_tf(
    t('Map background color'),
    $defaults['map_backgroundcolor'],
    t('Can be a color name or HTML hex, eg #FF0000. Leave empty for the default color.'),
    10
  );

  if ($extras) {
    $form['streetview_show'] = getlocations_element_map_checkbox(
      t('Show streetview button'),
      $defaults['streetview_show']
    );

    $form['trafficinfo'] = getlocations_element_map_checkbox(
      t('Enable Traffic information'),
      $defaults['trafficinfo'],
      t('Google Traffic layer, limited availability.')
    );
    $form['trafficinfo']['#suffix'] = '<div id="wrap-getlocations-trafficinfo">';
    $form['trafficinfo_state'] = getlocations_element_map_checkbox(
      t('Activate Traffic information'),
      $defaults['trafficinfo_state'],
      t('Activate Traffic layer when map is first displayed.')
    );
    $form['trafficinfo_state']['#suffix'] = '</div>';

    $form['bicycleinfo'] = getlocations_element_map_checkbox(
      t('Enable Bicycling information'),
      $defaults['bicycleinfo'],
      t('Google Bicycling layer, limited availability.')
    );
    $form['bicycleinfo']['#suffix'] = '<div id="wrap-getlocations-bicycleinfo">';
    $form['bicycleinfo_state'] = getlocations_element_map_checkbox(
      t('Activate Bicycle information'),
      $defaults['bicycleinfo_state'],
      t('Activate Bicycling layer when map is first displayed.')
    );
    $form['bicycleinfo_state']['#suffix'] = '</div>';

    $form['transitinfo'] = getlocations_element_map_checkbox(
      t('Enable Public transport information'),
      $defaults['transitinfo'],
      t('Google Transit layer, limited availability.')
    );
    $form['transitinfo']['#suffix'] = '<div id="wrap-getlocations-transitinfo">';
    $form['transitinfo_state'] = getlocations_element_map_checkbox(
      t('Activate Public transport information'),
      $defaults['transitinfo_state'],
      t('Activate Transit layer when map is first displayed.')
    );
    $form['transitinfo_state']['#suffix'] = '</div>';

    if ($config) {
      $form['panoramio_use'] = getlocations_element_map_checkbox(
        t('Load Panoramio Library'),
        $defaults['panoramio_use'],
        t('Provide Google panoramio library to all maps.')
      );
      $form['panoramio_use']['#suffix'] = '<div id="wrap-getlocations-panoramio-use">';
      $form['panoramio_show'] = getlocations_element_map_checkbox(
        t('Enable Panoramio'),
        $defaults['panoramio_show'],
        t('Google panoramio picture links.')
      );
      $form['panoramio_show']['#suffix'] = '<div id="wrap-getlocations-panoramio">';
      $form['panoramio_state'] = getlocations_element_map_checkbox(
        t('Activate Panoramio'),
        $defaults['panoramio_state'],
        t('Activate Panoramio when map is first displayed.')
      );
      $form['panoramio_state']['#suffix'] = '</div></div>';
    }
    elseif ($defaults['panoramio_use']) {
      $form['panoramio_show'] = getlocations_element_map_checkbox(
        t('Enable Panoramio'),
        $defaults['panoramio_show'],
        t('Google panoramio picture links.')
      );
      $form['panoramio_show']['#suffix'] = '<div id="wrap-getlocations-panoramio">';
      $form['panoramio_state'] = getlocations_element_map_checkbox(
        t('Activate Panoramio'),
        $defaults['panoramio_state'],
        t('Activate Panoramio when map is first displayed.')
      );
      $form['panoramio_state']['#suffix'] = '</div>';
    }
    // weather
    if ($config) {
      $form['weather_use'] = getlocations_element_map_checkbox(
        t('Load Weather Library'),
        $defaults['weather_use'],
        t('Provide Google Weather library to all maps.')
      );
      $form['weather_use']['#suffix'] = '<div id="wrap-getlocations-weather-use">';
      $form['weather_show'] = getlocations_element_map_checkbox(
        t('Enable Weather information'),
        $defaults['weather_show'],
        t('Google Weather information.')
      );
      $form['weather_show']['#suffix'] = '<div id="wrap-getlocations-weather">';
      $form['weather_state'] = getlocations_element_map_checkbox(
        t('Activate Weather information'),
        $defaults['weather_state'],
        t('Activate Weather information when map is first displayed.')
      );
      $form['weather_state']['#suffix'] = '</div>';

      $form['weather_temp'] = getlocations_element_dd(
        t('Temperature units'),
        $defaults['weather_temp'],
        array(1 => t('Celsius'), 2 => t('Fahrenheit'))
      );
      $form['weather_speed'] = getlocations_element_dd(
        t('Windspeed units'),
        $defaults['weather_speed'],
        array(1 => t('Kilometers per hour'), 2 => t('Meters per second'), 3 => t('Miles per hour'))
      );
      $form['weather_label'] = getlocations_element_dd(
        t('Label colour'),
        $defaults['weather_label'],
        array(0 => ('Auto'),  1 => t('Black'), 2 => t('White'))
      );
      $form['weather_cloud'] = getlocations_element_map_checkbox(
        t('Enable Cloud Layer'),
        $defaults['weather_cloud'],
        t('Google Cloud information.')
      );
      $form['weather_cloud']['#suffix'] = '<div id="wrap-getlocations-weather-cloud">';
      $form['weather_cloud_state'] = getlocations_element_map_checkbox(
        t('Activate Cloud Layer'),
        $defaults['weather_cloud_state'],
        t('Activate Cloud layer when map is first displayed.')
      );
      $form['weather_cloud_state']['#suffix'] = '</div>';

      $form['weather_clickable'] = getlocations_element_map_checkbox(
        t('Enable clicking on maps'),
        $defaults['weather_clickable']
      );
      $form['weather_info'] = getlocations_element_map_checkbox(
        t('Enable weather InfoWindows'),
        $defaults['weather_info']
      );
      $form['weather_info']['#suffix'] = '</div>';
    }
    elseif ($defaults['weather_use']) {
      $form['weather_show'] = getlocations_element_map_checkbox(
        t('Enable Weather information'),
        $defaults['weather_show'],
        t('Google Weather information.')
      );
      $form['weather_show']['#suffix'] = '<div id="wrap-getlocations-weather">';
      $form['weather_state'] = getlocations_element_map_checkbox(
        t('Activate Weather information'),
        $defaults['weather_state'],
        t('Activate Weather information when map is first displayed.')
      );

      $form['weather_cloud'] = getlocations_element_map_checkbox(
        t('Enable Cloud Layer'),
        $defaults['weather_cloud'],
        t('Google cloud information.')
      );
      $form['weather_cloud']['#suffix'] = '<div id="wrap-getlocations-weather-cloud">';
      $form['weather_cloud_state'] = getlocations_element_map_checkbox(
        t('Activate Cloud Layer'),
        $defaults['weather_cloud_state'],
        t('Activate Cloud layer when map is first displayed.')
      );
      $form['weather_cloud_state']['#suffix'] = '</div></div>';

    }

    $form['poi_show'] = getlocations_element_map_checkbox(
      t('Show Points of Interest'),
      $defaults['poi_show'],
      t('Show Google points of interest icons.')
    );
    $form['transit_show'] = getlocations_element_map_checkbox(
      t('Show Transit Points'),
      $defaults['transit_show'],
      t('Show Google transit points icons.')
    );
  }

  return $form;

}

function getlocations_paths_get() {

  $defaults = array(
    'infobubble_path' => GETLOCATIONS_PATH . '/js/infobubble.js',
    'infobubble_options_path' => GETLOCATIONS_PATH . '/js/infobubble_options.js',
    'markermanager_path' => GETLOCATIONS_PATH . '/js/markermanager.js',
    'markerclusterer_path' => GETLOCATIONS_PATH . '/js/markerclusterer.js',
    'infowindow_options_path' => GETLOCATIONS_PATH . '/js/infowindow_options.js',
    'getlocations_path' => GETLOCATIONS_PATH . '/js/getlocations.js',
  );
  $settings = variable_get('getlocations_paths', $defaults);
  $getlocations_paths = getlocations_adjust_vars($defaults, $settings);

  return $getlocations_paths;
}

function getlocations_markerpicker_link($id, $cat, $infoimg='') {
  if (module_exists('colorbox')) {
    $getlocations_colorbox = getlocations_colorbox_settings();
    if ($getlocations_colorbox['marker_enable']) {
      $boxwidth = $getlocations_colorbox['marker_width'];
      $boxheight = $getlocations_colorbox['marker_height'];
      if (empty($infoimg)) {
        $infoimg = '<img class="getlocations_infoimg" src="' . base_path() . drupal_get_path( 'module', 'getlocations') . '/images/info.png' . '" title="' . t('Click here to select an icon from a colorbox') . '" >';
      }
      $link = l($infoimg, 'getlocations/markerinfo', array(
          'attributes' => array(
            'class' => 'colorbox-load',
          ),
          'html' => TRUE,
          'query' => array('width' => $boxwidth, 'height' => $boxheight, 'iframe' => 'true', 'lt' => $id, 'cat' => $cat),
        )
      );
      return $link;
    }
  }
}

function getlocations_colorbox_settings() {
  $colorbox_defaults = array(
    'enable' => 0,
    'width' => 600,
    'height' => 600,
    'marker_enable' => 0,
    'marker_width' => 600,
    'marker_height' => 600,
  );
  $colorbox_settings =  variable_get('getlocations_colorbox', $colorbox_defaults);
  $getlocations_colorbox = getlocations_adjust_vars($colorbox_defaults, $colorbox_settings);
  return $getlocations_colorbox;
}

// run string through check_plain but then restore apostrophes
function getlocations_apoclean($string) {
  $string = trim($string);
  $string = check_plain($string);
  return htmlspecialchars_decode($string, ENT_QUOTES);
}

/**
 * Recursively merge the defaults with the current settings
 *
 * @param array $defaults
 *
 * @param array $settings
 *
 * @return array The merged settings
 *
 */
function getlocations_adjust_vars($defaults, $settings) {
  $newdefaults = array();
  foreach ($defaults AS $k => $v) {
    if (isset($settings[$k])) {
      if (is_array($v)) {
        $newdefaults[$k] = getlocations_adjust_vars($v, $settings[$k]);
      }
      else {
        $newdefaults[$k] = $settings[$k];
      }
    }
    else {
      $newdefaults[$k] = $v;
    }
  }
  return $newdefaults;
}

/**
 * Fetch fieldnames for a given module and type
 *
 * @param array $module module name
 * @param array $type type name
 *
 * @return array suitable for use in a dropdown.
 */
function getlocations_get_fieldnames($module = 'getlocations_fields', $type = 'getlocations_fields') {

  $field_names = array();
  $query = db_select('field_config', 'f');
  $query->fields('f', array('field_name'));
  $query->join('field_config_instance', 'i', 'f.id=i.field_id');
  $query->condition('f.module', $module)
    ->condition('f.type', $type)
    ->condition('f.active', 1);
  $rows = $query->execute();
  foreach ($rows AS $row) {
    $field_names[$row->field_name] = $row->field_name;
  }
  return $field_names;
}

/**
 * Fetch bundle names for a given module and type
 *
 * @param array $module module name
 * @param array $type type name
 *
 * @return array suitable for use in a dropdown.
 */
function getlocations_get_bundles($module = 'getlocations_fields', $type = 'getlocations_fields') {

  $bundles = array();
  $query = db_select('field_config', 'f');
  $query->fields('i', array('bundle'));
  $query->join('field_config_instance', 'i', 'f.id=i.field_id');
  $query->condition('f.module', $module)
    ->condition('f.type', $type)
    ->condition('f.active', 1);
  $rows = $query->execute();
  foreach ($rows AS $row) {
    $bundles[$row->bundle] = $row->bundle;
  }
  return $bundles;
}

/**
 * Fetch a list of the core Drupal list of countries.
 * from location module
 *
 * @param bool $upper Default uppercase
 *
 * @return array The countries array
 */
function getlocations_get_countries_list($upper = TRUE, $only_continents = '', $only_countries = '') {

  if (module_exists('countries')) {
    $filter = array('enabled' => COUNTRIES_ENABLED);
    if ($only_countries) {
      $only_countries = strtoupper($only_countries);
      $oc = explode(',', $only_countries);
      if (! empty($oc)) {
        $filter['countries'] = $oc;
      }
    }
    elseif (is_array($only_continents)) {
      $oc = array();
      foreach($only_continents AS $v) {
        $oc[] = $v;
      }
      if (! empty($oc)) {
        $filter['continents'] = $oc;
      }
    }
    $countries = countries_get_countries('name', $filter);
  }
  else {
    include_once DRUPAL_ROOT . '/includes/locale.inc';
    // Statically cache a version of the core Drupal list of countries
    $countries = &drupal_static(__FUNCTION__);
    if (! isset($countries) || empty($countries)) {
      $countries = country_get_list();
    }
  }
  if (! $upper) {
    $countries = array_change_key_case($countries, CASE_LOWER);
  }

  return $countries;
}

/**
 * Get the full country name
 *
 * @param string $id The two letter iso code of a country
 *
 * @return string Full country name.
 *
 */
function getlocations_get_country_name($id) {
  $countries = getlocations_get_countries_list();
  $id = drupal_strtoupper($id);
  $country = FALSE;
  if (isset($countries[$id])) {
    $country = $countries[$id];
  }
  return $country;
}

/**
 * Get the two letter code for a country
 *
 * @param string $country Full country name.
 *
 * @return string The two letter iso code of a country
 */
function getlocations_get_country_id($country) {
  $id = FALSE;
  $countries = getlocations_get_countries_list();
  foreach ($countries AS $k => $v) {
    if (drupal_strtoupper($country) == drupal_strtoupper($v)) {
      $id = drupal_strtoupper($k);
      break;
    }
  }
  return $id;
}

/**
 * Convert decimal degrees to degrees,minutes,seconds.
 * from location module
 *
 * @param float Decimal degrees
 *
 * @return array degrees,minutes,seconds,sign
 */
function getlocations_dd_to_dms($coord) {
  $negative = ($coord < 0) ? TRUE : FALSE;
  $coord = abs($coord);
  $degrees = floor($coord);
  $coord -= $degrees;
  $coord *= 60;
  $minutes = floor($coord);
  $coord -= $minutes;
  $coord *= 60;
  $seconds = round($coord, 6);
  return array($degrees, $minutes, $seconds, $negative);
}

/**
 * Convert dms string to decimal degrees.
 * Should be reasonably tolerant of sloppy input
 *
 * @param string
 *
 * @return string
 */
function getlocations_dms_to_dd($dms) {
  // If it ends with a word starting with S or W, then it's a negative
  // case insensitive
  $direction = 1;
  preg_match("/\s(\w+)\b$/", $dms, $m);
  if (preg_match("/^s/i", $m[1]) || preg_match("/^w/i", $m[1]) ) {
    $direction = -1;
  }

  $dmsarr = explode(' ', $dms);
  $dmsarr2 = array();
  foreach ($dmsarr AS $v) {
    if ($v) {
      // strip out non-numbers found at the end of the string so we keep '.'
      $tmp = preg_replace("/\D+$/", '', $v);
      $tmp = trim($tmp);
      if ($tmp) {
        $dmsarr2[] = $tmp;
      }
    }
  }
  $dd = FALSE;
  if (count($dmsarr2) == 3) {
    list($degrees, $minutes, $seconds) = $dmsarr2;
    $dd = floatval($degrees + ((($minutes * 60) + ($seconds )) / 3600));
    if ($dd > 0) {
      $dd = $direction * $dd;
    }
  }
  return $dd;
}

/**
 * Calculations functions.
 * from location module
 */

/**
 * License clarification:
 *
 * On Feb 13, 2005, in message <Pine.LNX.4.58.0502131827510.5072@server1.LFW.org>,
 * the creator of these routines, Ka-Ping Yee, authorized these routines to be
 * distributed under the GPL.
 */

/**
 * @file
 * Trigonometry for calculating geographical distances.
 * All function arguments and return values measure distances in metres
 * and angles in degrees.  The ellipsoid model is from the WGS-84 datum.
 * Ka-Ping Yee, 2003-08-11
 */

// This library is an original implementation of UCB CS graduate student, Ka-Ping Yee (http://www.zesty.ca).

define('GETLOCATIONS_EARTH_RADIUS_SEMIMAJOR', 6378137.0);
define('GETLOCATIONS_EARTH_FLATTENING', (1/298.257223563));
define('GETLOCATIONS_EARTH_RADIUS_SEMIMINOR', (6378137.0*(1-(1/298.257223563))));
define('GETLOCATIONS_EARTH_ECCENTRICITY_SQ', (2*(1/298.257223563)-pow((1/298.257223563), 2)));


// Default latitude halfway between north pole and equator
function getlocations_earth_radius($latitude=45) {
  // Estimate the Earth's radius at a given latitude.
  $lat = deg2rad($latitude);
  $x = (cos($lat) / GETLOCATIONS_EARTH_RADIUS_SEMIMAJOR);
  $y = (sin($lat) / GETLOCATIONS_EARTH_RADIUS_SEMIMINOR);
  $return = (1 / (sqrt($x * $x + $y * $y)));
  return $return;
}

/**
 * Returns the SQL fragment needed to add a column called 'distance' to a query. For use in Views distance/proximity calculations
 *
 * @param $latitude    The measurement point
 * @param $longitude   The measurement point
 * @param $tbl_alias   If necessary, the alias name. Used by SQL to clearly identify a field.
 */
function getlocations_earth_distance_sql($latitude, $longitude, $tbl_alias = '') {
  // Make a SQL expression that estimates the distance to the given location.
  $radius = getlocations_earth_radius($latitude);

  // If the table alias is specified, add on the separator.
  $tbl_alias = (empty($tbl_alias) ? '' : $tbl_alias . '.');

  $latfield = $tbl_alias . 'latitude';
  $lonfield = $tbl_alias . 'longitude';

  // all calcs in mysql
  #$sql = "(IFNULL(ACOS(COS(RADIANS($latitude)) * COS(RADIANS($latfield)) * (COS(RADIANS($longitude)) * COS(RADIANS($lonfield)) + SIN(RADIANS($longitude)) * SIN(RADIANS($lonfield))) + SIN(RADIANS($latitude)) * SIN(RADIANS($latfield))), 0.00000) * $radius)";
  // some calcs predone in php
  $long = deg2rad($longitude);
  $lat = deg2rad($latitude);
  $coslong = cos($long);
  $coslat = cos($lat);
  $sinlong = sin($long);
  $sinlat = sin($lat);
  $sql = "(IFNULL(ACOS($coslat * COS(RADIANS($latfield)) * ($coslong*COS(RADIANS($lonfield)) + $sinlong * SIN(RADIANS($lonfield))) + $sinlat * SIN(RADIANS($latfield))), 0.00000) * $radius)";

  return $sql;
}

/**
 * @param float $longitude1
 *
 * @param float $latitude1
 *
 * @param float $longitude2
 *
 * @param float $latitude2
 *
 * @return
 *   Returns distance in meters
 *
 */
function getlocations_earth_distance($longitude1, $latitude1, $longitude2, $latitude2) {
  $longitude1 = floatval($longitude1);
  $latitude1 = floatval($latitude1);
  $longitude2 = floatval($longitude2);
  $latitude2 = floatval($latitude2);

  // Estimate the earth-surface distance between two locations.
  $long1 = deg2rad($longitude1);
  $lat1 = deg2rad($latitude1);
  $long2 = deg2rad($longitude2);
  $lat2 = deg2rad($latitude2);
  $radius = getlocations_earth_radius(($latitude1 + $latitude2) / 2);

  $cosangle = cos($lat1)*cos($lat2) *
    (cos($long1)*cos($long2) + sin($long1)*sin($long2)) +
    sin($lat1)*sin($lat2);
  return acos($cosangle) * $radius;
}

/**
 * This function uses earth_asin_safe so is not accurate for all possible
 *   parameter combinations. This means this function doesn't work properly
 *   for high distance values. This function needs to be re-written to work properly for
 *   larger distance values. See http://drupal.org/node/821628
 */
function getlocations_earth_longitude_range($latitude, $longitude, $distance) {
  // Estimate the min and max longitudes within $distance of a given location.
  $long = deg2rad($longitude);
  $lat = deg2rad($latitude);
  $radius = getlocations_earth_radius($latitude);

  $angle = $distance / $radius;
  $diff = getlocations_earth_asin_safe(sin($angle)/cos($lat));
  $minlong = $long - $diff;
  $maxlong = $long + $diff;
  if ($minlong < -pi()) {
    $minlong = $minlong + pi()*2;
  }
  if ($maxlong > pi()) {
    $maxlong = $maxlong - pi()*2;
  }
  return array(rad2deg($minlong), rad2deg($maxlong));
}

function getlocations_earth_latitude_range($latitude, $longitude, $distance) {
  // Estimate the min and max latitudes within $distance of a given location.
  $long = deg2rad($longitude);
  $lat = deg2rad($latitude);
  $radius = getlocations_earth_radius($latitude);

  $angle = $distance / $radius;
  $minlat = $lat - $angle;
  $maxlat = $lat + $angle;
  $rightangle = pi()/2;
  if ($minlat < -$rightangle) { // wrapped around the south pole
    $overshoot = -$minlat - $rightangle;
    $minlat = -$rightangle + $overshoot;
    if ($minlat > $maxlat) {
      $maxlat = $minlat;
    }
    $minlat = -$rightangle;
  }
  if ($maxlat > $rightangle) { // wrapped around the north pole
    $overshoot = $maxlat - $rightangle;
    $maxlat = $rightangle - $overshoot;
    if ($maxlat < $minlat) {
      $minlat = $maxlat;
    }
    $maxlat = $rightangle;
  }
  return array(rad2deg($minlat), rad2deg($maxlat));
}

/**
 * This is a helper function to avoid errors when using the asin() PHP function.
 * asin is only real for values between -1 and 1.
 * If a value outside that range is given it returns NAN (not a number), which
 * we don't want to happen.
 * So this just rounds values outside this range to -1 or 1 first.
 *
 * This means that calculations done using this function with $x outside the range
 * will not be accurate.  The alternative though is getting NAN, which is an error
 * and won't give accurate results anyway.
 */
function getlocations_earth_asin_safe($x) {
  return asin(max(-1, min($x, 1)));
}

function getlocations_get_search_distance_sql($latitude, $longitude, $searchdistance, $tbl_alias = '') {
  $radius = getlocations_earth_radius($latitude);
  $tbl_alias = empty($tbl_alias) ? $tbl_alias : ($tbl_alias . '.');
  $latfield = $tbl_alias . 'latitude';
  $lonfield = $tbl_alias . 'longitude';

  // all calcs in mysql
  #$sql = "(IFNULL(ACOS((SIN(RADIANS($latitude)) * SIN(RADIANS($latfield)) + (COS(RADIANS($latitude)) * COS(RADIANS($latfield)) * COS(RADIANS($lonfield) - RADIANS($longitude))))), 0.00000) * $radius) BETWEEN 0 AND $searchdistance ";
  // some calcs predone in php
  $lat = deg2rad($latitude);
  $long = deg2rad($longitude);
  #$coslong = cos($long);
  $coslat = cos($lat);
  #$sinlong = sin($long);
  $sinlat = sin($lat);
  $sql = "(IFNULL(ACOS(($sinlat * SIN(RADIANS($latfield)) + ($coslat * COS(RADIANS($latfield)) * COS(RADIANS($lonfield) - $long )))), 0.00000) * $radius)";
  if ($searchdistance > 0) {
    $sql .= " BETWEEN 0 AND $searchdistance";
  }

  return $sql;
}


/**
 * @param $distance
 *   A number in either kilometers, meters, miles, yards or nautical miles.
 *
 * @param $distance_unit
 *   String (optional). in either kilometers (km), meters (m), miles (mi), yards (yd) or nautical miles (nmi).
 *
 * @return
 *   A floating point number where the number in meters after the initially passed scalar has been round()'d
 */
function getlocations_convert_distance_to_meters($distance, $distance_unit = 'km') {
  if (!is_numeric($distance) || $distance == 0) {
    return NULL;
  }
  $units = array(
    'km'  => 1000.0,
    'm'   => 1.0,
    'mi'  => 1609.344,
    'yd'  => 0.9144,
    'nmi' => 1852.0
  );
  if (! in_array($distance_unit, array_keys($units))) {
    $distance_unit = 'km';
  }
  $conv = $units[$distance_unit];
  // Convert distance to meters
  $retval = round(floatval($distance) * $conv, 2);
  return $retval;
}

/**
 * @param $meters
 *   The distance in meters.
 *
 * @param $distance_unit
 *   String (optional). in either kilometers (km), meters (m), miles (mi), yards (yd) or nautical miles (nmi).
 *
 * @return
 *   A floating point number where the converted number has been round()'d
 */
function getlocations_convert_meters_to_distance($meters, $distance_unit = 'km') {
  if (!is_numeric($meters) || $meters == 0) {
    return NULL;
  }
  $units = array(
    'km'  => 0.001,
    'm'   => 1.0,
    'mi'  => 0.000621371,
    'yd'  => 1.093613298,
    'nmi' => 0.000539957
  );
  if (! in_array($distance_unit, array_keys($units))) {
    $distance_unit = 'km';
  }
  $conv = $units[$distance_unit];
  // Convert meters to display units. formatting in theme_getlocations_fields_distance();
  $retval = ($meters * $conv);
  return $retval;
}

function getlocations_get_unit_names($unit = '', $type = 'plural') {
  $units_plural = array(
    'km'  => t('Kilometers'),
    'm'   => t('Meters'),
    'mi'  => t('Miles'),
    'yd'  => t('Yards'),
    'nmi' => t('Nautical miles'),
  );
  $units_plurals = array(
    'km'  => t('Kilometer(s)'),
    'm'   => t('Meter(s)'),
    'mi'  => t('Mile(s)'),
    'yd'  => t('Yard(s)'),
    'nmi' => t('Nautical mile(s)'),
  );
  $units = array(
    'km'  => t('Kilometer'),
    'm'   => t('Meter'),
    'mi'  => t('Mile'),
    'yd'  => t('Yard'),
    'nmi' => t('Nautical mile'),
  );
  // for dropdown
  $return = FALSE;
  if (empty($unit)) {
    if ($type == 'plural') {
      $return = $units_plural;
    }
    elseif ($type == 'plurals') {
      $return = $units_plurals;
    }
    else {
      $return = $units;
    }
  }
  else {
    // if $unit is supplied, return display name
    if (! in_array($unit, array_keys($units))) {
      $unit = 'km';
    }
    if ($type == 'plural') {
      $return = $units_plural[$unit];
    }
    elseif ($type == 'plurals') {
      $return = $units_plurals[$unit];
    }
    else {
      $return = $units[$unit];
    }
  }
  return $return;
}

// form elements
/**
 * @param string $default
 * @param string $title
 * @param string $description
 *
 * @return
 *   Returns form element
 *
 */
function getlocations_element_distance_unit($default, $title = '', $description = '') {
  if (empty($title)) {
    $title = t('Units');
  }
  $units = getlocations_get_unit_names();
  $element = array(
    '#type' => 'select',
    '#title' => $title,
    '#options' => $units,
    '#default_value' => $default,
  );
  if (! empty($description)) {
    $element['#description'] = $description;
  }
  return $element;

}

/**
 * @param string $default
 * @param string $title
 * @param string $description
 *
 * @return
 *   Returns form element
 *
 */
function getlocations_element_search_distance($default, $title = '', $description = '') {
  if (empty($title)) {
    $title = t('Distance');
  }
  $element = array(
    '#type' => 'textfield',
    '#title' => $title,
    '#default_value' => $default,
    '#size' => 10,
    '#required' => TRUE,
  );
  if (! empty($description)) {
    $element['#description'] = $description;
  }
  return $element;
}

function getlocations_is_mobile() {
  $getlocations_ua = getlocations_ua_get();
  $str = "/" . $getlocations_ua['ua_string'] . "/i";
  $is_mobile = FALSE;
  $ua = $_SERVER['HTTP_USER_AGENT'];
  if (preg_match($str, $ua)) {
    $is_mobile = TRUE;
  }
  return $is_mobile;
}

function getlocations_ua_get() {
  $default = array('ua_string' => "iphone|ipad|android|blackberry|blazer|bolt|symbian|mobile safari|fennec|gobrowser|iemobile|maemo browser|profile midp|minimo|kindle|opera mini|opera mobi|skyfire|teashark|uzardweb");
  $getlocations_ua = variable_get('getlocations_ua', $default);
  return $getlocations_ua;
}

function getlocations_get_term_marker($nid, $marker) {
  $getlocations_defaults = getlocations_defaults();
  // term markers
  $getlocations_term_marker = variable_get('getlocations_term_marker', array('enable' => 0, 'vids' => 0, 'max_depth' => ''));
  if ($getlocations_term_marker['enable'] && $getlocations_term_marker['vids']) {
    $vids = $getlocations_term_marker['vids'];
    foreach ($vids AS $vid) {
      $results = db_query('SELECT i.tid FROM {taxonomy_index} i JOIN {taxonomy_term_data} d ON i.tid=d.tid WHERE i.nid = :nid AND d.vid =:vid', array(':nid' => $nid, ':vid' => $vid));
      $record = $results->fetchObject();
      if ($record) {
        $marker = (isset($getlocations_term_marker['vid'][$vid]['term'][$record->tid]['map_marker']) ? $getlocations_term_marker['vid'][$vid]['term'][$record->tid]['map_marker'] : $getlocations_defaults['term_map_marker']);
      }
    }
  }
  return $marker;
}

function getlocations_supported_modules() {
  return array(
    'getlocations_fields',
    'geofield',
    'geolocation',
    'location_cck'
  );
}

function getlocations_get_current_supported_module() {
  $modules = getlocations_supported_modules();
  foreach ($modules AS $module) {
    if (module_exists($module)) {
      return $module;
    }
  }
  return FALSE;
}

/**
 * Given two points in lat/lon form, returns the distance between them.
 * @param $latlon_a
 *   An associative array where
 *      'lon' => is a floating point of the longitude coordinate for the point given by latlonA
 *      'lat' => is a floating point of the latitude coordinate for the point given by latlonB
 * @param $latlon_b
 *      Another point formatted like $latlon_b
 * @param $distance_unit
 *      A string that is one of 'km', 'm', 'mi', 'yd', 'nmi'.
 *      Defaults to 'km'
 * @return
 *    NULL if sense can't be made of the parameters.
 *    An associative array where
 *      'scalar' => Is the distance between the two lat/lon parameter points
 *      'distance_unit' => Is the unit of distance being represented by 'scalar'.
 *
 */
function getlocations_distance_between($latlon_a = array(), $latlon_b = array(), $distance_unit = 'km') {
  if (!isset($latlon_a['lon']) || !isset($latlon_a['lat']) || !isset($latlon_b['lon']) || !isset($latlon_b['lat'])) {
    return NULL;
  }

  $meters = getlocations_earth_distance($latlon_a['lon'], $latlon_a['lat'], $latlon_b['lon'], $latlon_b['lat']);
  $distance = getlocations_convert_meters_to_distance($meters, $distance_unit);
  return array('scalar' => $distance, 'distance_unit' => $distance_unit);
}


/***********************************************************/
// these functions currently not in use
function getlocations_earth_xyz($longitude, $latitude, $height = 0) {
  // Convert longitude and latitude to earth-centered earth-fixed coordinates.
  // X axis is 0 long, 0 lat; Y axis is 90 deg E; Z axis is north pole.

  $long = deg2rad($longitude);
  $lat = deg2rad($latitude);

  $coslong = cos($long);
  $coslat = cos($lat);
  $sinlong = sin($long);
  $sinlat = sin($lat);
  $radius = (GETLOCATIONS_EARTH_RADIUS_SEMIMAJOR / sqrt(1 - GETLOCATIONS_EARTH_ECCENTRICITY_SQ * $sinlat * $sinlat));
  $x = ($radius + $height) * $coslat * $coslong;
  $y = ($radius + $height) * $coslat * $sinlong;
  $z = (($radius * (1 - GETLOCATIONS_EARTH_ECCENTRICITY_SQ ) + $height) * $sinlat);
  return array($x, $y, $z);
}

function getlocations_earth_arclength($angle, $latitude=37.9) {
  // Convert a given angle to earth-surface distance.
  return deg2rad($angle) * getlocations_earth_radius($latitude);
}

function getlocations_get_exact_distance_sql($latitude, $longitude, $tbl_alias = '') {
  $radius = getlocations_earth_radius($latitude);
  $tbl_alias = empty($tbl_alias) ? $tbl_alias : ($tbl_alias . '.');
  $latfield = $tbl_alias . 'latitude';
  $lonfield = $tbl_alias . 'longitude';

  // all calcs in mysql
  #$sql = "(IFNULL(ACOS((SIN(RADIANS($latitude)) * SIN(RADIANS($latfield))) + (COS(RADIANS($latitude)) * COS(RADIANS($latfield)) * COS(RADIANS($longitude - $lonfield)))), 0.00000) * $radius)";
  // some calcs predone in php
  $lat = deg2rad($latitude);
  $long = deg2rad($longitude);
  #$coslong = cos($long);
  $coslat = cos($lat);
  #$sinlong = sin($long);
  $sinlat = sin($lat);
  $sql = "(IFNULL(ACOS(($sinlat * SIN(RADIANS($latfield))) + ($coslat * COS(RADIANS($latfield)) * COS(RADIANS($longitude - $lonfield)))), 0.00000) * $radius)";
  return $sql;
}
